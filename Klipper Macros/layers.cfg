#####################################################################
# BEFORE_LAYER_CHANGE
#####################################################################

[gcode_macro BEFORE_LAYER_CHANGE]
description: Add this to the "before layer change" input box in the slicer.
  Usage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>
gcode:
  {% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}
  {% set layer = params.LAYER|default(-1)|int + 1 %}
  {% if height >= 0.0 and layer >= 0 %}
    SET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"
    SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=cur_height VALUE="{height}"
    {% if printer["gcode_macro _LAYER_RUN"].clearance_z < height %}
      SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=clearance_z VALUE="{height}"
    {% endif %}
  {% endif %}

#####################################################################
# AFTER_LAYER_CHANGE
#####################################################################

[gcode_macro AFTER_LAYER_CHANGE]
description: Add this to the "after layer change" input box in the slicer.
  Usage: AFTER_LAYER_CHANGE
gcode:
  _LAYER_RUN

#####################################################################
# GCODE_AT_LAYER
#####################################################################

[gcode_macro GCODE_AT_LAYER]
description: Schedules the specified g-code command to be run at the specified
  layer. LAYER=next will cause the command to run at the next layer change. 
  Usage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode> 
                        [CANCEL=<0|1>]
gcode:
  {% set tot_layers = printer.print_stats.info.total_layer %}
  {% if params|length > 0 %}
    _CHECK_IS_PRINTING

    {% set CANCEL = params.CANCEL|default(0)|int != 0 %}
    {% set COMMAND = params.COMMAND|default(None) %}
    {% if COMMAND %} # This makes it easier to match commands for cancellation.
      {% set COMMAND = COMMAND.lstrip().split(None, 1) %}
      {% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}
    {% endif %}

    {% if "LAYER" in params %}
      {% set cmd_container = "commands_layer" %}
      {% set cur_layer = printer.print_stats.info.current_layer|int %}
      {% if "HEIGHT" in params %}
        {action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}
      {% elif params.LAYER|string|lower == "next" %}
        {% set LAYER = cur_layer + 1 %}
      {% else %}
        {% set LAYER = params.LAYER|int %}
      {% endif %}
      {% if LAYER <= cur_layer %}
        {action_raise_error("LAYER[%i] must be above current print layer[%i]." | format(LAYER, cur_layer))}
      {% elif tot_layers and LAYER > tot_layers %}
        {action_raise_error("LAYER[%i] must not be above top layer[%i]." | format(LAYER, tot_layers))}
      {% endif %}
      {% set key = LAYER %}

    {% elif "HEIGHT" in params %}
      {% set cmd_container = "commands_height" %}
      {% set HEIGHT = params.HEIGHT|float %}
      {% set cur_height = printer["gcode_macro _LAYER_RUN"].cur_height %}
      {% if HEIGHT <= cur_height %}
        {action_raise_error("HEIGHT[%.3f] must be above current print height[%.3f].") | format(HEIGHT, cur_height)}
      {% elif HEIGHT >= printer.toolhead.axis_maximum.z %}
        {action_raise_error("HEIGHT[%.3f] must be below maximum Z height[%.3f].") | format(HEIGHT, printer.toolhead.axis_maximum.z)}
      {% endif %}
      {% set key = HEIGHT %}

    {% else %}
      {action_raise_error("No HEIGHT or LAYER argument provided.")}
    {% endif %}
  
    {% set commands = printer["gcode_macro _LAYER_RUN"][cmd_container] %}
    {% if key not in commands and not CANCEL %}
      {% set dummy = commands.__setitem__(key, []) %}
    {% endif %}

    {% if CANCEL %}
      {% if key in commands %}
        {% set pos = ("%i"|format(key)) if key is integer else ("%.3fmm"|format(key)) %}
        {% if COMMAND %}
          {% set dummy = commands[key].remove(COMMAND) %}
          {% if commands[key]|length == 0 %}
            {% set dummy = commands.__delitem__(key) %}
          {% endif %}
          {action_respond_info("Cancelled %s %s:\n* %s" | format("layer" if x is integer else "height", pos, COMMAND))}
        {% else %}
          {% set dummy = commands.__delitem__(key) %}
          {action_respond_info("Cancelled all commands at %s %s." | format("layer" if x is integer else "height", pos))}
        {% endif %}
      {% endif %}
    {% elif not COMMAND %}
      {action_raise_error("No COMMAND argument provided.")}
    {% elif COMMAND in commands[key] %}
      {action_raise_error("Duplicate command previously scheduled.")}
    {% else %}
      {% set dummy = commands[key].append(COMMAND) %}
      {% set pos = ("%i"|format(key)) if key is integer else ("%.3fmm"|format(key)) %}
      {action_respond_info("%s %s:\n* %s" | format("layer" if key is integer else "height", pos, COMMAND))}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE={cmd_container} VALUE="{commands|replace('\"','\\\"')}"
    _UPDATE_LAYER_COMPAT

  # No arguments means just list all the triggers.
  {% else %}
    {% set output = [] %}
    {% set commands = printer["gcode_macro _LAYER_RUN"].commands_layer %}
    {% for key in commands|list|sort %}
      {% set dummy = output.append("layer %i:" | format(key)) %}
      {% for c in commands[key] %}
        {% set dummy = output.append("* %s" | format(c)) %}
      {% endfor %}
    {% endfor %}
    {% set commands = printer["gcode_macro _LAYER_RUN"].commands_height %}
    {% for key in commands|list|sort %}
      {% set dummy = output.append("height %.3fmm:" | format(key)) %}
      {% for c in commands[key] %}
        {% set dummy = output.append("* %s" | format(c)) %}
      {% endfor %}
    {% endfor %}
    {action_respond_info(output|join('\n'))}
  {% endif %}

#####################################################################
# _LAYER_RUN
#####################################################################

[gcode_macro _LAYER_RUN]
description: Runs pending commands for the current layer change.
  Usage: _LAYER_RUN
variable_cur_height: 0.0
variable_clearance_z: 0.0
variable_commands_layer: {}
variable_commands_height: {}
gcode:
  {% set cur_layer = printer.print_stats.info.current_layer %}
  {% for key in commands_layer | select("<=", cur_layer) | sort %}
    {action_respond_info("Executing scheduled commands at layer %d:\n%s"|format(key, commands_layer[key]|join('\n')))}
    {% for c in commands_layer[key] %}
      {c}
    {% endfor %}
    {% set dummy = commands_layer.__delitem__(key) %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_layer VALUE="{commands_layer|replace('\"','\\\"')}"
  {% for key in commands_height | select("<=", cur_height) | sort %} 
    {action_respond_info("Executing scheduled commands at height %.3f:\n%s"|format(key, commands_height[key]|join('\n')))}
    {% for c in commands_height[key] %}
      {c}
    {% endfor %}
    {% set dummy = commands_height.__delitem__(key) %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_height VALUE="{commands_height|replace('\"','\\\"')}"
  _UPDATE_LAYER_COMPAT

#####################################################################
# INIT_LAYER_GCODE
#####################################################################

[gcode_macro INIT_LAYER_GCODE]
description: Clears scheduled gcode commands and state for all layers.
  Usage: INIT_LAYER_GCODE LAYER_COUNT=<num>
gcode:
  SET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYER_COUNT|int + 1}" CURRENT_LAYER="{0}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=cur_height VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=clearance_z VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_layer VALUE="{{}}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_height VALUE="{{}}"
  _UPDATE_LAYER_COMPAT

#####################################################################
# _RESET_LAYER_GCODE
#####################################################################

[gcode_macro _RESET_LAYER_GCODE]
description: Clears scheduled gcode commands and state for all layers.
  Usage: _RESET_LAYER_GCODE
gcode:
  SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=cur_height VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=clearance_z VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_layer VALUE="{{}}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_height VALUE="{{}}"
  _UPDATE_LAYER_COMPAT

#####################################################################
# CANCEL_ALL_LAYER_GCODE
#####################################################################

[gcode_macro CANCEL_ALL_LAYER_GCODE]
description: Clears all scheduled gcode commands.
  Usage: CANCEL_ALL_LAYER_GCODE
gcode:
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_layer VALUE="{{}}"
  SET_GCODE_VARIABLE MACRO=_LAYER_RUN VARIABLE=commands_height VALUE="{{}}"
  _UPDATE_LAYER_COMPAT

#
# Begin Mainsail/Fluidd compat
#

#####################################################################
# SET_PAUSE_NEXT_LAYER
#####################################################################

[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  _CHECK_IS_PRINTING
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{{'enable': False, 'call': MACRO}}" VARIABLE=pause_next_layer 
  GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')}" CANCEL="{0 if ENABLE else 1}" LAYER="next"

#####################################################################
# SET_PAUSE_AT_LAYER
#####################################################################

[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  _CHECK_IS_PRINTING
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  # This enable logic is copied directly from Fluidd/Mainsail.
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default((pause_at_layer.layer|int, printer.print_stats.info.current_layer|int + 1)|max)%}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}

  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer': 0, 'call': MACRO}}"
  {% if ENABLE and pause_at_layer.enable %}
    # Remove the previously scheduled command if we're replacing it.
    GCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace('\"','\\\"')}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"
  {% endif %}
  # Add the new command.
  GCODE_AT_LAYER COMMAND="{MACRO|replace('\"','\\\"')}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"

#####################################################################
# SET_PRINT_STATS_INFO
#####################################################################

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: _SET_PRINT_STATS_INFO
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: {'enable': False, 'call': "PAUSE"}
variable_pause_at_layer  : {'enable': False, 'layer': 0, 'call': "PAUSE"}
gcode:
  _SET_PRINT_STATS_INFO {rawparams}

#####################################################################
# _UPDATE_LAYER_COMPAT
#####################################################################

[gcode_macro _UPDATE_LAYER_COMPAT]
gcode:
  {% set next_layer = printer.print_stats.info.current_layer|int + 1 %}
  {% set commands_layer = printer["gcode_macro _LAYER_RUN"].commands_layer %}
  {% set keys = commands_layer | sort(reverse=True) %}
  {% set pause_next_layer = {'enable': False, 'call': printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer.call} %}
  {% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}
    {% set dummy = pause_next_layer.__setitem__('enable', True) %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{pause_next_layer|replace('\"','\\\"')}"

  # Don't just make pause_at_layer a copy of pause_next_layer.
  {% set pause_at_layer = {'enable': False, 'layer': 0, 'call': printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer.call} %}
  {% if pause_next_layer.enable and pause_next_layer.call == pause_at_layer.call %}
    {% set keys = keys | reject("==", next_layer) %}
  {% endif %}

  # We iterate through the entire reverse sorted key list because Jinja2 doesn't
  # have a filter for dict values. It's ugly, but there should be only a few
  # items in the dict.
  {% for key in keys %}
    {% if pause_at_layer.call in commands_layer[key] %}
      {% set dummy = pause_at_layer.__setitem__('enable', True) %}
      {% set dummy = pause_at_layer.__setitem__('layer', key) %}
    {% endif %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{pause_at_layer|replace('\"','\\\"')}"

#
# End Mainsail/Fluidd compat
#

#####################################################################
# PAUSE_NEXT_LAYER
#####################################################################

[gcode_macro PAUSE_NEXT_LAYER]
description: Convenience macro to schedule the current print to pause at the
  next layer change. See PAUSE for additional arguments.
  Usage: PAUSE_NEXT_LAYER ...
gcode:
  _CHECK_KINEMATIC_LIMITS{% for x in params%}{' ' ~x~ '=' ~ params[x]}{% endfor %}
  GCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for x in params %}{' ' ~ x ~ '=' ~ params[x]}{% endfor %}"

#####################################################################
# PAUSE_AT_LAYER
#####################################################################

[gcode_macro PAUSE_AT_LAYER]
description: Convenience macro to schedule the current print to pause at the
  specified layer change. LAYER=next will cause the command to run at the next
  layer change. See PAUSE for additional arguments.
  Usage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...
gcode:
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "{% set dummy = params.LAYER|default(layer number)|float %}
  {% set dummy = params.HEIGHT|default(Z height)|int %}" %} 
  # End argument block for Mainsail
  {% set filtered_params = params|reject('in',['HEIGHT','LAYER'])|list|sort %}
  _CHECK_KINEMATIC_LIMITS {% for x in filtered_params%}{' ' ~x~ '=' ~ params[x]}{% endfor %}
  GCODE_AT_LAYER {% for x in params|select('in',['HEIGHT','LAYER'])|list %}{' ' ~ x ~ '=' ~ params[x] }{% endfor %} COMMAND="PAUSE{% for x in filtered_params %}{' ' ~ x ~ '=' ~ params[x]}{% endfor %}"

