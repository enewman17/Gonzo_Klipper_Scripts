[gcode_macro _LOAD_UNLOAD]
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set saved_extruder = printer.toolhead.extruder%}
  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% set default_minimum = mvar.load_temp_min if mvar.load_temp_min else (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
  
  {% if 'TEMPERATURE' in params %}
    {% set TEMP = params.TEMPERATURE|int %}
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and printer["gcode_macro RESUME"].saved_extruder_temp %}
    {% set TEMP = printer["gcode_macro RESUME"].saved_extruder_temp %}
  {% elif printer[EXTRUDER].target > default_minimum %}
    {% set TEMP = printer[EXTRUDER].target %}
  {% else %}
    {% set TEMP = default_minimum %}
  {% endif %}
  {% if TEMP < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=saved_e VALUE="{0.0}"
  {% endif %}

  {% set LENGTH = params.LENGTH|default(mvar.load_length)|float - mvar.load_priming_length%}
  {% if LENGTH < 0 %}
    {% set mvar.load_priming_length = (mvar.load_priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  SAVE_GCODE_STATE NAME=_LOAD_UNLOAD
  {% if EXTRUDER != saved_extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
  {% endif %}
  {% if not printer.extruder.can_extrude or printer[EXTRUDER].target < default_minimum %}
    {action_respond_info("Preheating %s to %d" | format(EXTRUDER, TEMP|int))}
    M109 S{TEMP}
  {% endif %}
  M83
  {% if params.LOAD|int %}
    G1 E{LENGTH} F{mvar.load_speed}
    G1 E{mvar.load_priming_length} F{mvar.load_priming_speed}
    G1 E{'%.4f' % -printer["gcode_macro RESUME"].saved_e} F{mvar.load_speed}
  {% else %}
    {% if mvar.unload_with_tip_shaping %}
      {% set pre_prime_distance = 5.0 %}
      {% set shaping_moves = 5 %}
      {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
      # Push forward to heat up, then retract to the edge of the meltzone.
      G1 E{pre_prime_distance} F{mvar.load_speed}
      G4 P500
      G1 E{'%.4f' % -(mvar.load_priming_length - shaping_distance)} F{mvar.load_speed}
      # Shape the tip with a pairs of short extrusions and retractions, where
      # the retractions get increasingly longer than the extrusion.
      {% for i in range(1, shaping_moves + 1) %}
        G1 E2 F{priming_speed}
        G1 E-{2 + (0.1 * i)} F{priming_speed}
      {% endfor %}
      # Retract the rest of the length.
      G1 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{mvar.load_speed}
    {% else %}
      G1 E-{LENGTH} F{mvar.load_speed}
    {% endif %}
  {% endif %}
  RESTORE_GCODE_STATE NAME=_LOAD_UNLOAD

  # Beep on completion
  _BEEP_IF_AVAILABLE BEEPS={params.BEEPS|default(8)}


[gcode_macro LOAD_FILAMENT]
description: Loads filament into the extruder.
  Usage: LOAD_FILAMENT [EXTRUDER=<temp>] [TEMPERATURE=<temp>] [LENGTH=<distance>]
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set position = printer.gcode_move.gcode_position %}
  {% if mvar.park_x != position.x and mvar.park_y != position.y %}
    PARK_TOOLHEAD
  {% endif %}
  _LOAD_UNLOAD LOAD=1{% for x in params %}{' '~x~'="'~params[x]~'"'}{% endfor %}
  {% if mvar.load_purge_wipe %}
    PURGE_AND_WIPE
  {% endif %}
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.TEMPERATURE|default(260) %}
  {% set dummy = params.LENGTH|default(100)|float %}
  " %} # End argument block for Mainsail


[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the extruder.
  Usage: UNLOAD_FILAMENT [EXTRUDER=<extruder>] [TEMPERATURE=<temp>] [LENGTH=<distance>]
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set position = printer.gcode_move.gcode_position %}
  {% if mvar.park_x != position.x and mvar.park_y != position.y %}
    PARK_TOOLHEAD
  {% endif %}
  _LOAD_UNLOAD LOAD=0{% for x in params %}{' '~x~'="'~params[x]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.TEMPERATURE|default(260) %}
  {% set dummy = params.LENGTH|default(100)|float %}
  " %} # End argument block for Mainsail

[gcode_macro _PAUSE_INNER_M700]
gcode:
  {% set EXTRUDER = "EXTRUDER" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  {% if EXTRUDER != printer.toolhead.extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
  {% endif %}

  {% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}

  {% if printer.idle_timeout.state|string == "Printing" %}
    PAUSE
  {% elif not printer.pause_resume.is_paused%}
    PARK_TOOLHEAD
  {% endif %}

[gcode_macro M701]
description: Pauses/parks the toolhead then loads filament to the extruder.
  Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode:
  {% if 'U' in params %}
    {% if not 'L' in params %}
      RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
      {% set dummy = params.__setitem__("L", params.U) %}
    {% else %}
      RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
    {% endif %}
  {% endif %}

  _PAUSE_INNER_M700 {% for x in params %}{' '~x~'="'~params[x]~'"'}{% endfor %}
  LOAD_FILAMENT LENGTH={params.L|default(printer["gcode_macro _MACRO_VARIABLES"].load_length)|float}

[gcode_macro M702]
description: Pauses/parks the toolhead then unloads filament from the extruder.
  Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode:
  {% if 'L' in params %}
    {% if not 'U' in params %}
      RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
      {% set dummy = params.__setitem__("U", params.L) %}
    {% else %}
      RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
    {% endif %}
  {% endif %}

  _PAUSE_INNER_M700 {% for x in params %}{' '~x~'="'~params[x]~'"'}{% endfor %}
  UNLOAD_FILAMENT LENGTH={params.U|default(printer["gcode_macro _MACRO_VARIABLES"].load_length)|float}