#####################################################################
# INITIALIZE AT STARTUP
#####################################################################

[delayed_gcode _INIT_STARTUP]
initial_duration: 1.0
gcode:
  # Lets check a few things!
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  LIST_MACROS VARS=1 SILENT=1 # Build the macro cache.
  _MACRO_VARIABLES
  _CHECK_CONFIG
  _NOZZLE_PRIME_PARAMETERS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
  
  {% if printer.skew_correction is defined and mvar.load_skew_profile == "True" %}
    SKEW_PROFILE LOAD="{mvar.skew_profile_name}"   #default_skew_profile
    RESPOND TYPE=echo MSG='{"SKEW PROFILE " ~ mvar.skew_profile_name ~ " LOADED"}'
  {% endif %}
  
  # Keeps the MMU OFF state persistant between power cycles if turned on / off with the helper macro or save variable exists.
  {% set svv = printer.save_variables.variables %}
  {% if svv.mmu_enable_state != none and svv.mmu_enable_state == 0 %}  
	MMU ENABLE={svv.mmu_enable_state}
  {% endif %}
  G4 P500
  {% if printer.mmu.enabled == "True" %}
    MMU_SERVO POS=MOVE # Lets just make sure the servo is in the move position incase start-up homing is enabled
    CUTTER_CLOSE
  {% endif %} 
  
#   START_HOME_QGL_PROMPT  CLOSE=60    ## Home axes at startup with a prompt- home, home with QGL home with carto/beacon touch (CLOSE PARAM IS IN SECONDS / 0=OFF)
#   START_HOME
  START_HOME_QGL       ## Home axes at startup and QGL for becon and cartographer probe

  SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=status VALUE='"READY"'
  STATUS_READY

###########################################################################################################################################
# MACRO_VARIABLES
###########################################################################################################################################

[gcode_macro _MACRO_VARIABLES]
description: Variables for Macros. 
             Special Thanks to: 
             Justin Schuh: https://github.com/jschuh/klipper-macros A lot of code and ideas were borrowed from those macros.  
             Jualianschill: https://github.com/julianschill/klipper-led_effect/tree/develop
             garethky: https://github.com/garethky/klipper-voron2.4-config/blob/mainline/printer_data/config/heatsoak.cfg
             moggieuk: https://github.com/moggieuk/Happy-Hare 

###########################################################################################################################################
# MACHINE
###########################################################################################################################################
variable_machine_style:  "VORON2"                      # "VORON2", "TRIDENT", "VORON0", "SWITCHWIRE", "OTHER"
variable_mmu:            True                          # Multi Material Unit such as ECRF or Tradrack
variable_probe_type: "carto_touch"                     # "carto", "carto_touch", "beacon", "beacon_touch", "eddy", "tap", "npn", "bl_touch", "biqu_micoprobe"

# If you have an internal air scrubber such as a Nevermore [fan_generic nermore/my_air_purifier/ect...]
variable_air_scrubber:                   True          # If you have some kind of chamber air purifier installed, will turn on when a print starts and run after a print ends
variable_air_scrubber_qty:                  2          # The number of chamber air scrubbers, like a Nevermore.
variable_air_scrubber_name:   "chamber_air_scrubber"   # Example: If using 2 air scrubbers. Name each fan in your config for the air scrubbers sequentially [fan_generic Nevermore_1]  [fan_generic Nevermore_2] and so on
                                                       # If you're only using one air scrubber, name it however you like. It just has to be set up as [fan_generic FAN_NAME] 
                                                       # In the variable "air_scrubber_name", ommit the _1 _2 scheme as set up in your congig (just use the main fans name), 
                                                       # the macro will add the necessary underscore and a number if variable_air_scrubber_qty is greater than 1.
variable_air_scrubber_speed:              1.0          # Speed of fan during print. Must be between 0(Off) and 1(Full) (example 0.5 is half speed)
variable_air_scrubber_end_duration:        30          # How many minutes you would like it to run after the print ends.
variable_air_scrubber_end_speed:          1.0          # Speed of fan after the print ends. Must be between 0(Off) and 1.0(Full) (example 0.5 is half speed)

variable_has_active_heater_chamber:      False         # Dedicated heater to heat the chamber.
variable_active_heater_name:    "heater_generic chamber_heater"    # Name of the [heater_generic chamber_heater] set up in your config
variable_chamber_temp_sensor:   "temperature_sensor chamber"      # Name of the sensor [temperature_sensor chamber] set up in your config
variable_heat_soak:                      False         # Will start a heatsoak before leveling and meshing ensuring the machine has settled to temperature.
variable_heat_soak_bed_temp:               0.0         # Set bed temp for heatsoak. If set to 0.0 the bed temp set by the slicer is used. 
variable_exhaust_fan:               "exhaust_fan"      # Name given to the exhaust fan, used for cooling the chamber/exhaust
variable_min_exhaust_fan_speed:            0.5         # Minimum exhaust fan speed, value between 0 and 1  (example 0.5 is half speed)
variable_max_exhaust_fan_speed:            1           # Maximum exhaust fan speed, value between 0 and 1  (example 0.5 is half speed)

variable_temp_delta: 5                                 # Min & Max variation for the temperature wait

###########################################################################################################################################
# KINEMATICS
###########################################################################################################################################
## Print area check absolute position of nozzle relative to bed edges and set values to keep nozzle inside bed area.
## Things like havine a purge bucket can affect where the bed is placed, endstop placement also affect the absolute position of the bed.
## if you would like to use values from stepper config use ### EXAMPLE: variable_print_min: (1111, 1111) variable_print_max: (9999, 9999)
variable_print_min:               (1111, 1111)        # X, Y origin # example: (0, 0)
variable_print_max:               (9999, 9999)        # X, Y printable max area (check absolute position of nozzle relative to bed) # example: (350, 350)

variable_travel_spd_xy:                 8000          # Travel speed along x and y-axis in mm/min.
variable_travel_spd_z:                  1500          # Travel speed along z axis in mm/min.
variable_clearance_z:                      2        # Z Travel height from 0=BED (also used for lifting Z after a print )

variable_load_skew_profile:               True        # Automatically load skew profile
variable_skew_profile_name:   "default_skew_profile"  # leave blank if you don't want your skew profile loaded

###########################################################################################################################################
# PARK TOOLHEAD
###########################################################################################################################################
# To use values from stepper config, use 1111 for minimum or 9999 for maximum
variable_park_toolhead_position:   "BLOBIFIER"     # Park toolhead "DEFAULT" set by park variables below, "BUCKET" or "BLOBIFIER"
                                                   # Setting to BLOBIFIER will also result in BLOBIFIER as the default purge function when calling "purge_and_wipe"
variable_park_x:                          53.0     # X position to park toolhead (absolute position used to park the toolhead unless 1111 or 9999 is used)
variable_park_y:                          9999     # Y position to park toolhead (absolute position used to park the toolhead unless 1111 or 9999 is used)
variable_park_z:                          10.0     # Z position to park toolhead (used as a minium height to park the toolhead)

###########################################################################################################################################
# LOAD - UNLOAD
###########################################################################################################################################
variable_park_load_unload_filament:       True     # Park the toolhead when load or unloading filament.
variable_load_purge_wipe:                 True     # Purge and wipe nozzle after loading new filament.
variable_load_temp_min:                    260     # Minimum extruder temp for loading (if none defined the default is: min_extrude_temp + 5).
variable_load_length:                       38     # Length (mm) of filament to load from extruder gears to heatbreak (bowden tubes will be much longer).
variable_load_priming_length:               76     # Length (mm) of the hotend's meltzone (length of the hotend end to tip).
variable_load_priming_speed:               200     # Filament priming speed (mm/min).
variable_load_speed:                       300     # Filament loading speed (mm/min).
variable_unload_with_tip_shaping:        False     # Use tip shaping when unloading.

###########################################################################################################################################
# Start Print / Nozzle Prime Line
###########################################################################################################################################
variable_adaptive_bed_mesh:              "slicer"  # Choose between who handles adaptive bed mesh, "klipper" or "slicer" Example: Orca has a setting for its own adaptive bed meshing and parameters will be passed onto the Print_Start Macro.
variable_adaptive_bed_mesh_margin:          10     # In 'mm' the amount of extra space outside the print area, a buffer area to make sure you have enough data for a good bed level.
variable_standby_nozzle_temp:              150     # The standby temperature for the nozzle during PRINT_START before the actual print begins. homing, leveling, bed mesh, ect... 
variable_prime_line_position:             "REAR"   # Set the prime line to to be drawn in the FRONT or REAR of the print area
variable_start_purge_clearance:             10     # Distance (in millimeters) between the purge lines and the print area.
variable_start_purge_length:                30     # Length of filament (in millimeters) to purge at print start, 30 is a good starting point.
variable_start_purge_prime_length:          20     # Length of filament (in millimeters) to prime before drawing purge lines.
variable_flow_rate:                         12     # Flow rate of purge in mm3/s. Default is 12.

###########################################################################################################################################
# Purge and Wipe Nozzle 
###########################################################################################################################################
# These parameters define filament purging.
variable_purge_temp:          260      # Temperature for purging filament
variable_purge_temp_min:      220      # Minimum Temp allowed for purge. 
variable_purge_length:        100      # Amount of filament to purge in mm. Klipper default is max 50mm Add to the [extruder] section "max_extrude_only_distance: <value>" value can be whatever you want.
variable_purge_feedrate:      400      # Speed, in mm/min, of the purge. 400 is a good purge rate, especially for the CW2 extruder
variable_raise_z:              10      # Height the Z axis will be raised during purge.
variable_purge_retraction:      5      # Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.

# These parameters define your cleaning, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_wipe_spd_xy:       10000          # Nozzle wipe speed in mm/min.
variable_wipe_temp_min:         0      # Minimum nozzle temperature to permit a wipe.

# Adjust this so that your nozzle hits the wiping device. For a Bambu Labs style wipe the nozzle should hit the upper quarter or so of the tube.
# If the filament doesn't brake off try lowering the nozzle more. 
# It might be required to add or adjust ([stepper_z] position_min: -5.0) to a negative value to get below the build plate.
variable_wiper_top:          0         # Z position in mm

#      |      |  
#       \    /    #####      
#        \__/   #########
#              ########### 
#               #########
#                 #####

variable_style: "A1"   ; Define the style of brush or wiper you are using. "BRUSH"=copper/brush wire bursh, "A1"= Bambu style silicone wipe, "P1X1"= Bambu style P1 or X1 PTFE tube wiper.

variable_wiper_x:        106          # X position of wiper. This is the toolhead's position (center of nozzle) to center of the wiper.
variable_wiper_y:        357          # Y position of wiper. This is the toolhead's position (center of nozzle) to center of the wiper. 
variable_wiper_y_max:   True          # True sets Y axis maximum (default for rear of machine) , False sets Y axis to minimum for the front of the machine. 
  
variable_wipe_travel:     15          # distance to travel from center when cleaning in (mm). This includes brushes, center to starting edge.
variable_jog_y:            2          # For brush or A1 silicone wipe you can make the toolhead jog back and forth across the brush while it wipes. 0 = no jog
variable_wipe_qty:         4          # Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_slow_wipes:       2          # Number of complete slow wipes to begin and end the wipe sequence
  
###########################################################################################################################################
# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below, buckets can be any shape or size. To simplify macros measurements are to centers.
# 
#                                           
#   bucket_start (x)        ___________________________________________   Y-Max = Rear Value=[position_max]
#     X-Min = Left         |                 |       |                 |  
# Value=0[position_min]    |                 |       |                 |
#                          |                 |_______|                 |  X-Max = Right Value=[position_max]
#                          |                 |   |   |                 |
#                          |                 |   |   |                 |
#                          |_________________|.  |  .|_________________|  Y-Min = Front Value=0[position_min]
#                         | ← ----------------- → ← ----------------- →
#                        wiper_x  End to Center__|
#                         | ← --------------------------------------- →|_End to End  bucket_right_edge
#                         |                                       
#       Build plates edge |
#                  =0     | 
#        _______________________________________________________________________________________
#                                          PRINTER FRONT
#
#
#
#               X-0,Y-MAX             REAR              X-MAX,Y-MAX
#                          __________________________  
#                         |                          |            
#                         |                          |
#                         |                          |
#               LEFT      |                          |  RIGHT
#                         |                          |
#                         |                          |
#                         |                          |
#                         |                          |
#                         |__________________________|
#                X-0,Y-0         PRINTER FRONT           Y-0,X-MAX
#
###########################################################################################################################################


# This is the toolhead's position (center of nozzle) to right edge of the bucket.
variable_bucket_right_edge: 90            

# For V1.8, you may need to measure from the edge of build plate to buckets edge and input into bucket_start_x. Move the toolhead till the nozzle
# is inline with the buckets edge.  Otherwise, a value of 0 is the default for the rear corner of the bed.
# installation of purge bucket at rear left. 
variable_bucket_start_x: 0

variable_status: {} # "READY", "PRINT_INIT", "PRINT_END", "PRINTING",  Used for macros to see if its in the pre-print initialization

gcode:
  {% if print_min == (1111, 1111) %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=print_min VALUE="{(printer.toolhead.axis_minimum.x, printer.toolhead.axis_minimum.y)}"
  {% endif %}
  {% if print_max == (9999, 9999) %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=print_max VALUE="{(printer.toolhead.axis_maximum.x, printer.toolhead.axis_maximum.y)}"
  {% endif %}
  {% if park_x == 1111 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_x VALUE={printer.configfile.settings.stepper_x.position_min|int}
  {% elif park_x == 9999 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_x VALUE={printer.configfile.settings.stepper_x.position_max|int}
  {% endif %}
  {% if park_y == 1111 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_y VALUE={printer.configfile.settings.stepper_y.position_min|int}
  {% elif park_y == 9999 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_y VALUE={printer.configfile.settings.stepper_y.position_max|int}
  {% endif %}

##########################################################################################################################################
##########################################################################################################################################
##########################################  Various Checks and Helper Macros  ############################################################
##########################################################################################################################################
##########################################################################################################################################
# Python enablers




################################################
# SIMPLE HOME & QGL
################################################

[gcode_macro START_HOME_QGL_PROMPT]
gcode:
  {% set close = params.CLOSE %}
  {% if close != 0 %}
    UPDATE_DELAYED_GCODE ID=_CLOSE_PROMPT DURATION={close}
  {% endif %}

  RESPOND TYPE=command MSG="action:prompt_begin HOME AXES"
  RESPOND TYPE=command MSG="action:prompt_text Attention: Printer is not homed."
  RESPOND TYPE=command MSG="action:prompt_footer_button HOME|START_HOME PROMPT_END=1"
  RESPOND TYPE=command MSG="action:prompt_footer_button HOME_QGL|START_HOME_QGL PROMPT_END=1"
  RESPOND TYPE=command MSG="action:prompt_footer_button HOME_TOUCH|START_HOME_QGL_TOUCH PROMPT_END=1"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"

################################################
# CLOSE_PROMPT
################################################
[delayed_gcode _CLOSE_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"


################################################
# START_HOME_QGL_TOUCH
################################################
[gcode_macro START_HOME_QGL_TOUCH]
description: safer and faster QGL for Cartographer and Beacon probes, touch home after QGL and a nozzle wipe

gcode:
  {% set end = params.PROMPT_END %}
  {% if end == 1 %}
    RESPOND TYPE=command MSG="action:prompt_end"
  {% endif %}
  RESPOND TYPE=echo MSG='{"HOMING AXES"}'
  {% if printer.toolhead.homed_axes != 'xyz' %}
    STATUS_HOMING   ; Sets SB-leds to homing-mode
    G28 ; Home All Axes First
  {% endif %}
  STATUS_CALIBRATING_Z
  RESPOND TYPE=echo MSG='{"QGL"}'
  QUAD_GANTRY_LEVEL horizontal_move_z=5 retries=3 retry_tolerance=1.000
  {% if mvar.probe_type == "carto_touch" %}
    {% if printer.extruder.temperature > 150 + mvar.temp_delta %}
      PARK_TOOLHEAD
      M106 S255
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150.0
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={150.0 - mvar.temp_delta}
    {% endif %}
    M107
    WIPE_NOZZLE
	STATUS_HOMING   ; Sets SB-leds to homing-mode
    CARTOGRAPHER_TOUCH
  {% else %}
    {% if mvar.probe_type == "beacon_touch" %}
      {% if printer.extruder.temperature > 150 + mvar.temp_delta %}
        PARK_TOOLHEAD
        M106 S255
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150.0
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={150.0 - mvar.temp_delta}
      {% endif %}
      M107
      WIPE_NOZZLE
      STATUS_HOMING   ; Sets SB-leds to homing-mode
      G28 Z  METHOD=CONTACT CALIBRATE=0
    {% endif %}
  {% endif %}
  STATUS_READY


################################################
# START_HOME_QGL
################################################
[gcode_macro START_HOME_QGL]
description: Home axes with and QGL for becon and cartographer probe

gcode:
  {% set end = params.PROMPT_END %}
  {% if end == 1 %}
    RESPOND TYPE=command MSG="action:prompt_end"
  {% endif %}
  RESPOND TYPE=echo MSG='{"HOMING AXES"}'
  {% if printer.toolhead.homed_axes != 'xyz' %}
    STATUS_HOMING   ; Sets SB-leds to homing-mode
    G28			        ; Home All Axes
  {% endif %}
  STATUS_CALIBRATING_Z
  RESPOND TYPE=echo MSG='{"QGL"}'
  QUAD_GANTRY_LEVEL horizontal_move_z=5 retries=3 retry_tolerance=1.000
  G28 Z
  STATUS_READY


################################################
# START_HOME
################################################
[gcode_macro START_HOME]
description: safer and faster QGL for Cartographer and Beacon probes

gcode:
  {% set end = params.PROMPT_END %}
  {% if end == 1 %}
    RESPOND TYPE=command MSG="action:prompt_end"
  {% endif %}
  RESPOND TYPE=echo MSG='{"HOMING AXES"}'
  {% if printer.toolhead.homed_axes != 'xyz' %}
    STATUS_HOMING   ; Sets SB-leds to homing-mode
    G28			        ; Home All Axes
  {% endif %}
  STATUS_READY

#####################################################################
# ADD SECONDS PARAM TO G4 COMMAND
#####################################################################
[gcode_macro G4]
description: USE SECONDS OR MILISECONDS IN THE G4 PAUSE COMMAND (G4 S1 = PAUSE FOR 1 SECOND) -OR- (G4 P1000 = PAUSE FOR 1 SECOND)
rename_existing: G4.1
gcode:
  {% set SEC = params.S|default(0)|int %}
  {% set MILI = params.P|default(0)|int %}
  {% if 'P' in params %}
    G4.1 P{MILI}
  {% elif 'S' in params %}
    {% set TIME = 1000*SEC %}
    G4.1 P{TIME}
  {% endif %}


#####################################################################
# _CHECK_IS_PRINTING
#####################################################################
[gcode_macro _CHECK_IS_PRINTING]
description: Check printing state.
gcode:
  {% if printer.idle_timeout.state|string  != "Printing" and not printer.virtual_sdcard.is_active and not printer.pause_resume.is_paused %}
    {action_raise_error("No active print.")}
  {% endif %}



#####################################################################
# FIRMWARE_RETRACTION
#####################################################################
[gcode_macro FIRMWARE_RETRACTION]
description: Set firmware retractions
gcode:
  {% set retract_length = params.RETRACT_LENGTH|default(0.8) %}
  {% set retract_speed = params.RETRACT_SPEED|default(60)  %}
  {% set unretract_extra_length = params.UNRETRACT_EXTRA_LENGTH|default(0)  %}
  {% set unretract_speed = params.UNRETRACT_SPEED|default(60)  %}
  {% set z_hop_height = params.Z_HOP_HEIGHT|default(0.4)  %}
  {% set clear_zhop_on_z_moves = params.CLEAR_ZHOP_ON_Z_MOVES|default(False)  %}

  SET_RETRACTION RETRACT_LENGTH={retract_length} RETRACT_SPEED={retract_speed} UNRETRACT_EXTRA_LENGTH={unretract_extra_length} UNRETRACT_SPEED={unretract_speed} Z_HOP_HEIGHT={z_hop_height} CLEAR_ZHOP_ON_Z_MOVES={clear_zhop_on_z_moves}


##########################################################################################################################################
# CHECK_CONFIG
##########################################################################################################################################
[gcode_macro _CHECK_CONFIG]
variable_load_errors: []
description: Checks global variables and throws an error on any invalid values.
  Does nothing if the config has no errors.
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set output = load_errors %}
  {% if mvar.park_x > printer.toolhead.axis_maximum.x or
        mvar.park_x < printer.toolhead.axis_minimum.x %}
    {% set dummy = output.append("park_x is invalid.") %}
  {% endif %}
  {% if mvar.park_y > printer.toolhead.axis_maximum.y or
        mvar.park_y < printer.toolhead.axis_minimum.y %}
    {% set dummy = output.append("park_y is invalid.") %}
  {% endif %}
  {% if mvar.park_z > printer.toolhead.axis_maximum.z or
        mvar.park_z < printer.toolhead.axis_minimum.z %}
    {% set dummy = output.append("park_z is invalid.") %}
  {% endif %}
  {% if mvar.print_max[0] > printer.toolhead.axis_maximum.x or
        mvar.print_max[1] > printer.toolhead.axis_maximum.y %}
    {% set dummy = output.append("print_max is invalid.") %}
  {% endif %}
  {% if mvar.print_min[0] < printer.toolhead.axis_minimum.x or
        mvar.print_min[1] < printer.toolhead.axis_minimum.y %}
    {% set dummy = output.append("print_min is invalid.") %}
  {% endif %}
#   {% if mvar.load_length > 
#         printer.configfile.settings["extruder"].max_extrude_only_distance %}
#     {% set dummy = output.append(
#       "load_length exceeds max_extrude_only_distance.") %}
#   {% endif %}
#   {% if mvar.load_length < mvar.load_priming_length %}
#     {% set dummy = output.append(
#       "load_length is shorter than load_priming_length.") %}
#   {% endif %}
#   {% if mvar.load_length < 0.0 %}
#     {% set dummy = output.append("load_length is negative.") %}
#   {% endif %}
#   {% if mvar.load_priming_length < 0.0 %}
#     {% set dummy = output.append("load_priming_length is negative.") %}
#   {% endif %}
#   RESPOND TYPE=echo MSG='{"CONFIG OK"}'

  # Emit all the config errors.
  {% if output %}
    { action_raise_error(output|sort|join('\nError: ')) }
  {% endif %}
  M400
  

##########################################################################################################################################
# LIST_MACROS
##########################################################################################################################################
[gcode_macro LIST_MACROS]
description: Lists registered macros (and optionally show variable state).
  Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros: {}
gcode:
  {% if not macros %}
    {% set renames = {} %}
    {% for x in printer.configfile.config %}
      {% if x.lower().startswith("gcode_macro") and printer.configfile.config[x].rename_existing %}
          {% set name = x.split(None, 1)[1] | lower %}
          {% set dummy = renames.__setitem__(name,[printer.configfile.config[x].rename_existing|lower] + renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
    {% for x in printer %}
      {% if x.lower().startswith("gcode_macro") %}
        {% set name = x.split(None, 1)[1] | lower %}
        {% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if params.SILENT|default(0)|int == 0 %}
    _LIST_MACROS_DISPLAY {rawparams}
  {% endif %}


##########################################################################################################################################
# LIST_MACROS_DISPLAY
##########################################################################################################################################
[gcode_macro _LIST_MACROS_DISPLAY]
gcode:
  {% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
  {% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}

  {% set macros = printer["gcode_macro LIST_MACROS"].macros %}
  {% set output = [] %}
  {% for x in macros %}
    {% if SEARCH in x | lower %}
      {% set line = x ~ ((" (renames: %s)" % (macros[x]|join(","))) if macros[x] else "") %}
      {% set outvars = [] %}
      {% if VARS %}
        {% for v in printer["gcode_macro " ~ x] | sort %}
          {% set dummy = outvars.append("\n* %s: %s" % (v, printer["gcode_macro " ~ x][v]|string)) %}
        {% endfor %}
      {% endif %}
      {% set dummy = output.append(line + outvars | join("")) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output | sort | join("\n")) }


##########################################################################################################################################
# SEARCH_VARIABLE
##########################################################################################################################################
[gcode_macro SEARCH_VARIABLES]
description: Lists per-macro variables with a name containing SEARCH. This is 
  useful for debugging macros by allowing you to probe printer state. Be very
  careful, however, as an overly broad SEARCH parameter can take a long time
  to process and potentially hang or crash klipper.
  Usage: LISTVARS SEARCH=<search_string>
gcode:

  {% if 'SEARCH' not in params and 'S' not in params %}
    { action_raise_error("Must provide a SEARCH parameter.") }
  {% endif %}
  {% set SEARCH = params.SEARCH|default()|lower %}
  {% set ns = namespace() %}
  {% set output = [] %}
  {% for item in printer %}
    {% if item is not string %}
      {% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
    {% elif ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}
    {% endif %}

    {% if SEARCH in ns.path|lower %}
      {% set dummy = output.append(ns.path|join) %}
    {% endif %}

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
          {% set ns.path = ns.path[:loop.depth|int + 1] %}
          {% if childkey is not string %}
            {% set null = ns.path.append("[%s]" % (childkey|string)) %}
          {% elif ' ' in childkey %}
            {% set null = ns.path.append("['%s']" % (childkey)) %}
          {% else %}
            {% set null = ns.path.append(".%s" % (childkey)) %}
          {% endif %}

          {% if child is mapping  %}
            {loop(child.items())}
          {% else %}
            {% if SEARCH in ns.path|lower %}
              {% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
            {% endif %}
          {% endif %}
        {% endfor %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|join("\n")) }


##########################################################################################################################################
# DUMP_VARIABLES
##########################################################################################################################################
[gcode_macro DUMP_VARIABLES]
description: Dump all variable.params <value>
gcode:
  {% set filter_name = params.NAME|default('')|string|lower %}
  {% set filter_value = params.VALUE|default('')|string|lower %}
  {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
  {% set out = [] %}

  {% for key1 in printer %}
    {% for key2 in printer[key1] %}
      {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
        {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
      {% endif %}
    {% else %}
      {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
        {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  { action_respond_info(out|join("\n")) }
  