#####################################################################
# INITIALIZE AT STARTUP
#####################################################################

[delayed_gcode _INIT_STARTUP]
initial_duration: 1.0
gcode:
  LIST_MACROS SILENT=1 # Build the macro cache.
  _MACRO_VARIABLES
  _CHECK_CONFIG
  _NOZZLE_PRIME_PARAMETERS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"
  #START_HOMEING ## Home Axis's at startup
  QGL      ## Home Axis's at startup and QGL for cartographer probe
  {% if printer.mmu.enabled and not printer.mmu.is_homed %}
    MMU_HOME
  {% endif %}  
  STATUS_READY

###########################################################################################################################################
# MACRO_VARIABLES
###########################################################################################################################################

[gcode_macro _MACRO_VARIABLES]
description: variables for macros

###########################################################################################################################################
# MACHINE
###########################################################################################################################################
variable_machine_style:  "VORON2"         # "VORON2", "TRIDENT", "VORON0", "SWITCHWIRE", "OTHER"
variable_mmu:            True             # Multi Material Unit such as ECRF or Tradrack
variable_probe_type: "carto_touch"        # "carto", "carto_touch", "beacon", "beacon_touch", "eddy", "tap", "npn", "bl_touch", "biqu_micoprobe"

variable_has_active_heater_chamber:      False     # Dedicated heater to heat the chamber.
variable_heat_soak:                      False     # Will start a heatsoak before leveling and meshing ensuring the machine has settled to temperature.
variable_heat_soak_bed_temp:               0.0     # Set bed temp for heatsoak. If set to 0.0 the temp set by the slicer is used. 

variable_park_over_purge_bucket:          True     # Park toolhead over purge bucket / Rear left Corner

###########################################################################################################################################
# KINEMATICS
###########################################################################################################################################
## Print area check absolute position of nozzle relative to bed edges and set values to keep nozzle inside bed area.
## Things like havine a purge bucket can affect where the bed is placed, endstop placement also affect the absolute position of the bed.
## if you would like to use values from stepper config use ### EXAMPLE: variable_print_min: (1111, 1111) variable_print_max: (9999, 9999)
variable_print_min:               (1111, 1111)     # X, Y origin # example: (0, 0)
variable_print_max:               (9999, 9999)     # X, Y printable max area (check absolute position of nozzle relative to bed) # example: (350, 350)

variable_travel_speed_xy:                 8000     # Travel speed along x and y-axis in mm/min.
variable_travel_speed_z:                  1500     # Travel speed along z axis in mm/min.
variable_clearance_z:                        5     # Z Travel height from 0=BED (also used for lifting Z after a print )

###########################################################################################################################################
# PARK TOOLHEAD
###########################################################################################################################################
# To use values from stepper config, use 1111 for minimum or 9999 for maximum
variable_park_x:                          53.0     # X position to park toolhead (absolute position used to park the toolhead unless 1111 or 9999 is used)
variable_park_y:                          9999     # Y position to park toolhead (absolute position used to park the toolhead unless 1111 or 9999 is used)
variable_park_z:                          10.0     # Z position to park toolhead (used as a minium height to park the toolhead)

###########################################################################################################################################
# LOAD - UNLOAD
###########################################################################################################################################
variable_park_load_unload_filament:       True     # Park the toolhead when load or unloading filament.
variable_load_purge_wipe:                 True     # Purge and wipe nozzle after loading new filament.
variable_load_temp_min:                    270     # Minimum extruder temp for loading (if none defined the default is: min_extrude_temp + 5).
variable_load_length:                      120     # Total length (mm) of filament to load from extruder gears to nozzle (bowden tubes will be much longer).
variable_load_priming_length:               20     # Length (mm) of the hotend's meltzone (feeds at priming speed).
variable_load_priming_speed:               200     # Filament priming speed (mm/min).
variable_load_speed:                       500     # Filament loading speed (mm/min).
variable_unload_with_tip_shaping:        False     # Use tip shaping when unloading.

###########################################################################################################################################
# Start Print / Nozzle Prime Line
###########################################################################################################################################
variable_standby_nozzle_temp:              150     # The standby temperature for the nozzle during PRINT_START before the actual print begins. homing, leveling, bed mesh, ect... 
variable_prime_line_position:             "REAR"   # Set the prime line to to be drawn in the FRONT or REAR of the print area
variable_start_purge_clearance:             10     # Distance (in millimeters) between the purge lines and the print area.
variable_start_purge_length:                30     # Length of filament (in millimeters) to purge at print start, 30 is a good starting point.
variable_start_purge_prime_length:          15     # Length of filament (in millimeters) to prime before drawing purge lines.
variable_flow_rate:                         12     # Flow rate of purge in mm3/s. Default is 12.

###########################################################################################################################################
# Purge and Wipe Nozzle
###########################################################################################################################################
# These parameters define filament purging.
variable_purge_temp:          260      # Temperature for purging filament
variable_purge_temp_min:      220      # Minimum Temp allowed for purge.
variable_purge_length:        100      # Amount of filament to purge in mm. Klipper default is max 50mm Add to the [extruder] section "max_extrude_only_distance : <value>" value can be whatever you want.
variable_purge_feedrate:      400      # Speed, in mm/min, of the purge.
variable_purge_retraction:      5      # Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.

# These parameters define your cleaning, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_wipe_temp_min:       150      # Minimum nozzle temperature to permit a wipe. default is 150 for TAP safe bed temp
variable_wipe_qty:              3      # Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_wipe_speed:         8000      # Nozzle wipe speed in mm/min.
variable_raise_z:              10      # Height the Z axis will be raised during purge.

# Adjust this so that your nozzle hits the wiping device. For a Bambu Labs style wipe the nozzle should hit the upper quarter or so of the tube.
# If the filament doesn't brake off try lowering the nozzle more. 
# It might be required to add or adjust ([stepper_z] position_min: -5.0) to a negative value to get below the build plate.
variable_wiper_top:          -1.0      # Z position in mm

#      |      |  
#       \    /    #####      
#        \__/   #########
#              ########### 
#               #########
#                 #####

variable_wiper_x:        106          # X position of wiper. This is the toolhead's position (center of nozzle) to center of the wiper.
variable_wiper_y:        353           # X position of wiper. This is the toolhead's position (center of nozzle) to center of the wiper. 
variable_wiper_y_max:   True          # True sets Y axis maximum (default for rear of machine) , False sets Y axis to minimum for the front of the machine. 

variable_wipe_travel:    15           # distance to travel from center when cleaning in (mm).   
  
###########################################################################################################################################
# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. To simplify things I have changed measurements from end to center.
# 
#                                           
#   bucket_start (x)        ___________________________________________   Y-Max = Rear Value=[position_max]
#     X-Min = Left         |                 |       |                 |  
# Value=0[position_min]    |                 |       |                 |
#                          |                 |_______|                 |  X-Max = Right Value=[position_max]
#                          |                 |   |   |                 |
#                          |                 |   |   |                 |
#                          |_________________|.  |  .|_________________|  Y-Min = Front Value=0[position_min]
#                         | ← ----------------- → ← ----------------- →
#                        wiper_x  End to Center__|
#                         | ← --------------------------------------- →|_End to End  bucket_right_edge
#                         |                                       
#       Build plates edge |
#                  =0     | 
#        _______________________________________________________________________________________
#                                          PRINTER FRONT
#
#
#
#               X-0,Y-MAX             REAR              X-MAX,Y-MAX
#                          __________________________  
#                         |                          |            
#                         |                          |
#                         |                          |
#               LEFT      |                          |  RIGHT
#                         |                          |
#                         |                          |
#                         |                          |
#                         |                          |
#                         |__________________________|
#                X-0,Y-0         PRINTER FRONT           Y-0,X-MAX
#
###########################################################################################################################################


# This is the toolhead's position (center of nozzle) to right edge of the bucket.
variable_bucket_right_edge: 162            

# For V1.8, you may need to measure from the edge of build plate to buckets edge and input into bucket_start_x. Move the toolhead till the nozzle
# is inline with the buckets edge.  Otherwise, a value of 0 is the default for the rear corner of the bed.
# installation of purge bucket at rear left. 
variable_bucket_start_x: 0



gcode:
  {% if print_min == (1111, 1111) %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=print_min VALUE="{(printer.toolhead.axis_minimum.x, printer.toolhead.axis_minimum.y)}"
  {% endif %}
  {% if print_max == (9999, 9999) %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=print_max VALUE="{(printer.toolhead.axis_maximum.x, printer.toolhead.axis_maximum.y)}"
  {% endif %}
  {% if park_x == 1111 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_x VALUE={printer.configfile.settings.stepper_x.position_min|int}
  {% elif park_x == 9999 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_x VALUE={printer.configfile.settings.stepper_x.position_max|int}
  {% endif %}
  {% if park_y == 1111 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_y VALUE={printer.configfile.settings.stepper_y.position_min|int}
  {% elif park_y == 9999 %}
    SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=park_y VALUE={printer.configfile.settings.stepper_y.position_max|int}
  {% endif %}


##########################################################################################################################################
# CHECK_CONFIG
##########################################################################################################################################

[gcode_macro _CHECK_CONFIG]
variable_load_errors: []
description: Checks global variables and throws an error on any invalid values.
  Does nothing if the config has no errors.
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set output = load_errors %}
  {% if mvar.park_x > printer.toolhead.axis_maximum.x or
        mvar.park_x < printer.toolhead.axis_minimum.x %}
    {% set dummy = output.append("park_x is invalid.") %}
  {% endif %}
  {% if mvar.park_y > printer.toolhead.axis_maximum.y or
        mvar.park_y < printer.toolhead.axis_minimum.y %}
    {% set dummy = output.append("park_y is invalid.") %}
  {% endif %}
  {% if mvar.park_z > printer.toolhead.axis_maximum.z or
        mvar.park_z < printer.toolhead.axis_minimum.z %}
    {% set dummy = output.append("park_z is invalid.") %}
  {% endif %}
  {% if mvar.print_max[0] > printer.toolhead.axis_maximum.x or
        mvar.print_max[1] > printer.toolhead.axis_maximum.y %}
    {% set dummy = output.append("print_max is invalid.") %}
  {% endif %}
  {% if mvar.print_min[0] < printer.toolhead.axis_minimum.x or
        mvar.print_min[1] < printer.toolhead.axis_minimum.y %}
    {% set dummy = output.append("print_min is invalid.") %}
  {% endif %}
  {% if mvar.load_length > 
        printer.configfile.settings["extruder"].max_extrude_only_distance %}
    {% set dummy = output.append(
      "load_length exceeds max_extrude_only_distance.") %}
  {% endif %}
  {% if mvar.load_length < mvar.load_priming_length %}
    {% set dummy = output.append(
      "load_length is shorter than load_priming_length.") %}
  {% endif %}
  {% if mvar.load_length < 0.0 %}
    {% set dummy = output.append("load_length is negative.") %}
  {% endif %}
  {% if mvar.load_priming_length < 0.0 %}
    {% set dummy = output.append("load_priming_length is negative.") %}
  {% endif %}

  # Emit all the config errors.
  {% if output %}
    { action_raise_error(output|sort|join('\nError: ')) }
  {% endif %}
  M400


##########################################################################################################################################
# LIST_MACROS
##########################################################################################################################################


[gcode_macro LIST_MACROS]
description: Lists registered macros (and optionally show variable state).
  Usage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>
variable_macros: {}
gcode:
  {% if not macros %}
    {% set renames = {} %}
    {% for x in printer.configfile.config %}
      {% if x.lower().startswith("gcode_macro") and printer.configfile.config[x].rename_existing %}
          {% set name = x.split(None, 1)[1] | lower %}
          {% set dummy = renames.__setitem__(name,[printer.configfile.config[x].rename_existing|lower] + renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
    {% for x in printer %}
      {% if x.lower().startswith("gcode_macro") %}
        {% set name = x.split(None, 1)[1] | lower %}
        {% set dummy = macros.__setitem__(name, renames[name]|default([])) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if params.SILENT|default(0)|int == 0 %}
    _LIST_MACROS_DISPLAY {rawparams}
  {% endif %}

##########################################################################################################################################
# LIST_MACROS_DISPLAY
##########################################################################################################################################

[gcode_macro _LIST_MACROS_DISPLAY]
gcode:
  {% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}
  {% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}

  {% set macros = printer["gcode_macro LIST_MACROS"].macros %}
  {% set output = [] %}
  {% for x in macros %}
    {% if SEARCH in x | lower %}
      {% set line = x ~ ((" (renames: %s)" % (macros[x]|join(","))) if macros[x] else "") %}
      {% set outvars = [] %}
      {% if VARS %}
        {% for v in printer["gcode_macro " ~ x] | sort %}
          {% set dummy = outvars.append("\n* %s: %s" % (v, printer["gcode_macro " ~ x][v]|string)) %}
        {% endfor %}
      {% endif %}
      {% set dummy = output.append(line + outvars | join("")) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output | sort | join("\n")) }

##########################################################################################################################################
# SEARCH_VARIABLE
##########################################################################################################################################

[gcode_macro SEARCH_VARIABLES]
description: Lists per-macro variables with a name containing SEARCH. This is 
  useful for debugging macros by allowing you to probe printer state. Be very
  careful, however, as an overly broad SEARCH parameter can take a long time
  to process and potentially hang or crash klipper.
  Usage: LISTVARS SEARCH=<search_string>
gcode:

  {% if 'SEARCH' not in params and 'S' not in params %}
    { action_raise_error("Must provide a SEARCH parameter.") }
  {% endif %}
  {% set SEARCH = params.SEARCH|default()|lower %}
  {% set ns = namespace() %}
  {% set output = [] %}
  {% for item in printer %}
    {% if item is not string %}
      {% set ns.path = ['printer', "[%s]" % (item|string), ''] %}
    {% elif ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}
    {% endif %}

    {% if SEARCH in ns.path|lower %}
      {% set dummy = output.append(ns.path|join) %}
    {% endif %}

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
          {% set ns.path = ns.path[:loop.depth|int + 1] %}
          {% if childkey is not string %}
            {% set null = ns.path.append("[%s]" % (childkey|string)) %}
          {% elif ' ' in childkey %}
            {% set null = ns.path.append("['%s']" % (childkey)) %}
          {% else %}
            {% set null = ns.path.append(".%s" % (childkey)) %}
          {% endif %}

          {% if child is mapping  %}
            {loop(child.items())}
          {% else %}
            {% if SEARCH in ns.path|lower %}
              {% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}
            {% endif %}
          {% endif %}
        {% endfor %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|join("\n")) }