#####################################################################
#   Start Print VORON 2.4
#####################################################################
# Replace the slicer's custom start and end g-code scripts with the following Print Start Phases
# I'm using Orca Slicer so some values my need to be changed in order to push the 
# correct values to the PRINT_START macro.
#
######### BETTER "PREFERED" METHOD #########
# _PRINT_START_PHASE_INIT EXTRUDER={nozzle_temperature[0]} BED={bed_temperature[0]} Chamber={chamber_temperature[0]} PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]} MESH_MIN={adaptive_bed_mesh_min[0]},{adaptive_bed_mesh_min[1]} MESH_MAX={adaptive_bed_mesh_max[0]},{adaptive_bed_mesh_max[1]} LAYER_COUNT=[total_layer_count] NOZZLE_SIZE={nozzle_diameter[0]}
# _PRINT_START_PHASE_PREHEAT
# _PRINT_START_PHASE_CHAMBER
# _PRINT_START_PHASE_LEVEL
# _PRINT_START_PHASE_MESH
# _PRINT_START_PHASE_EXTRUDER INITIAL_TOOL={initial_tool} REFERENCED_TOOLS=!referenced_tools! TOOL_COLORS=!colors! TOOL_TEMPS=!temperatures! TOOL_MATERIALS=!materials! FILAMENT_NAMES=!filament_names! PURGE_VOLUMES=!purge_volumes!
# _PRINT_START_PHASE_PRIME
#
# (The 'Extruder' section is where the MMU is started. So if you're using an MMU then you will need to add the folling params to the extruder phase. Even if not using an MMU it won't hurt to have them in the slicers start gcode.)
#
# Setting individual PHASES to start in the slicer is a superior method since it provides a faster way to cancel a print during this preparation stage.
# When a macro is started it will be finished before any other commands will be processed through the planners queue.
# So if you use PRINT_START everthing in the macro will have to finish before a command like CANCEL will be processed because it is at the end of the queue.
# If you use the _PRINT_START_PHASE then a command like CANCEL will at least be sent once that PHASE has been completed and the next one starts, shortening the wait time to CANCEL.
# Other than that an EMERGENCY STOP is the only other way to cancel a print faster but will also require a firmware restart 
#
#  OR...
#
######### OLD "NOT PREFERD" METHOD ##########
# PRINT_START EXTRUDER={nozzle_temperature[0]} BED={bed_temperature[0]} Chamber={chamber_temperature[0]} PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]} MESH_MIN={adaptive_bed_mesh_min[0]},{adaptive_bed_mesh_min[1]} MESH_MAX={adaptive_bed_mesh_max[0]},{adaptive_bed_mesh_max[1]} LAYER_COUNT={total_layer_count} NOZZLE_SIZE={nozzle_diameter[0]} INITIAL_TOOL={initial_tool} REFERENCED_TOOLS=!referenced_tools! TOOL_COLORS=!colors! TOOL_TEMPS=!temperatures! TOOL_MATERIALS=!materials! FILAMENT_NAMES=!filament_names! PURGE_VOLUMES=!purge_volumes!
#
#
#
#####################################################################
#####################################################################
# Don't forget to put PRINT_END in the "END" section of your slicer.
# 
# PRINT_END
#
#
#####################################################################
#####################################################################


#####################################################################
# PRINT START
#####################################################################
[gcode_macro PRINT_START]
description: Runs phases to prepare for printing. 
  BEWARE: Once it starts it must finish. If you want to cancel before it finishes
  running through all the phases, an emergency stop is the only way to stop it sooner.
gcode:
  _PRINT_START_PHASE_INIT {rawparams}
  _PRINT_START_PHASE_PREHEAT {rawparams}
  _PRINT_START_PHASE_CHAMBER {rawparams}
  _PRINT_START_PHASE_LEVEL {rawparams}
  _PRINT_START_PHASE_MESH {rawparams}
  _PRINT_START_PHASE_EXTRUDER {rawparams}
  _PRINT_START_PHASE_PRIME {rawparams}
 
#####################################################################
# PRINT_START_PHASE_INIT
#####################################################################
[gcode_macro _PRINT_START_PHASE_INIT]
description: Initializes the print start and parameters for all other phases.

variable_print_params: {}


gcode:
  SET_GCODE_VARIABLE MACRO=_PHASE_CHECK VARIABLE=cancel VALUE=False
  _PHASE_CHECK PHASE=INIT
  SET_DISPLAY_TEXT MSG="PRINT_START_PHASE_INIT"
  RESPOND TYPE=command MSG="PRINT_START_PHASE_INIT"
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=status VALUE='"PRINT_INIT"'

  # Save all the params for use by the other phases and check that they are there.
  {%for x in params %}
    {% set dummy = print_params.__setitem__(x|upper, params[x]) %}
  {% endfor %}

  {% set expected_params = ('EXTRUDER', 'BED', 'CHAMBER', 'PRINT_MIN', 'PRINT_MAX', 'MESH_MIN', 'MESH_MAX', 'LAYER_COUNT', 'NOZZLE_SIZE') %}
  {% set missing_params = expected_params|reject('in', params)|list %}
    {% if missing_params %}
        { action_raise_error ("Error: Missing print parameters from the slicer. \n '%s' " % missing_params|sort|join(", ")) }
    {% endif%}
  
  # Lets check for a loaded skew profile then load one if load skew profile is true.
  {% if printer.skew_correction.current_profile_name is not defined and mvar.load_skew_profile is true %}
    SKEW_PROFILE LOAD="{mvar.skew_profile_name}"   #default_skew_profile
    RESPOND TYPE=command MSG='{"SKEW PROFILE " ~ mvar.skew_profile_name ~ " LOADED"}'
  {% endif %}

 
  # Homes the printer if needed
  {% if printer.toolhead.homed_axes != 'xyz' %}
		STATUS_HOMING   ; Sets SB-leds to homing-mode
    {% if mvar.probe_type == "beacon_touch" %}
      G28 Z METHOD=CONTACT CALIBRATE=1
    {% else %}
      G28							; Home All Axes
    {% endif %}
  {% endif %}
  
  ### PARK TOOLHEAD ###
  PARK_TOOLHEAD
  
  SET_DISPLAY_TEXT MSG="CLEARING PAUSE"
  RESPOND TYPE=command MSG="CLEARING PAUSE"
  CLEAR_PAUSE

  SET_DISPLAY_TEXT MSG="INITIATE LAYER COUNT"
  RESPOND TYPE=command MSG="INITIATE LAYER COUNT"
  INIT_LAYER_GCODE LAYER_COUNT={LAYER_COUNT}

    ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="PREHEAT"

#####################################################################
# PRINT_START_PHASE_PREHEAT
#####################################################################
[gcode_macro _PRINT_START_PHASE_PREHEAT]
description: Starts preheating of the printer
gcode:
  M400 ; Wait for everything in the planner to finish
  _PHASE_CHECK PHASE=PREHEAT
  SET_DISPLAY_TEXT MSG="PRINT_START_PHASE_PREHEAT"
  RESPOND TYPE=command MSG="PRINT_START_PHASE_PREHEAT"
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set print = printer["gcode_macro _PRINT_START_PHASE_INIT"].print_params %}
  {% set BED = print.BED|default(60)|int %}
  {% set EXTRUDER = print.EXTRUDER|default(220)|int %}
  {% set CHAMBER = print.CHAMBER|default(0)|int %}
  
  {% if printer.extruder.temperature < mvar.standby_nozzle_temp %}
      M107  ; Turns off partcooling fan
  {% endif %}
   
  ### Let's just make sure this delayed gcode is expired  ###
  UPDATE_DELAYED_GCODE ID=_CHAMBER_AIR_SCRUBBER_OFF DURATION=0
  
  ### Turn on Chamber Air Scrubber/Purifier ###
  {% if mvar.air_scrubber is true %}
    {% if mvar.air_scrubber_qty == 1 %}
      SET_FAN_SPEED FAN="{mvar.air_scrubber_name}"|lower SPEED={mvar.air_scrubber_speed}
      {action_respond_info("'%s' has been activated" % (mvar.air_scrubber_name|string|upper))}
    {% else %}
      {% set scrubber_name = mvar.air_scrubber_name|string|lower %}
      {% set scrubber_qty = mvar.air_scrubber_qty|default(1)|int %}
      {% for i in range(1, scrubber_qty + 1) %}
        {% set new_scrubber_name = "{}_{}".format(scrubber_name, i) %}
        SET_FAN_SPEED FAN="{new_scrubber_name}" SPEED={mvar.air_scrubber_speed}
        {action_respond_info("'%s' has been activated" % (new_scrubber_name|string|upper))}
      {% endfor %}
    {% endif %}
  {% endif %}
  
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN="{mvar.exhaust_fan}" TARGET={CHAMBER} MIN_SPEED={mvar.min_exhaust_fan_speed} MAX_SPEED={mvar.max_exhaust_fan_speed}

  ### Heating nozzle to standby temp ###
  {% if printer.extruder.target != mvar.standby_nozzle_temp %}
    {% if printer.extruder.temperature > mvar.standby_nozzle_temp %}
      M106 S255
    {% endif %}
    SET_DISPLAY_TEXT MSG='{"Setting EXTRUDER temperature to %3.1f\u00B0C," % (mvar.standby_nozzle_temp)}'
    RESPOND TYPE=command MSG='{"Setting EXTRUDER temperature to %3.1f\u00B0C," % (mvar.standby_nozzle_temp)}'
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={mvar.standby_nozzle_temp}
  {% endif %}

  STATUS_HEATING ; Sets SB-leds to heating-mode
  SET_DISPLAY_TEXT MSG='{"Setting BUILD PLATE temperature to %3.1f\u00B0C," % (BED)}'
  RESPOND TYPE=command MSG='{"Setting BUILD PLATE temperature to %3.1f\u00B0C," % (BED)}'
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}
  SET_DISPLAY_TEXT MSG="BED HAS REACHED TEPERATURE"
  RESPOND TYPE=command MSG="BED HAS REACHED TEPERATURE"
  
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={mvar.standby_nozzle_temp - mvar.temp_delta} MAXIMUM={mvar.standby_nozzle_temp + mvar.temp_delta}
  WIPE_NOZZLE ; Quick nozzle wipe.
  M107  ; Turns off partcooling fan
  
  ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="CHAMBER"

#####################################################################
# PRINT_START_PHASE_CHAMBER
#####################################################################
[gcode_macro _PRINT_START_PHASE_CHAMBER]
description: Activates a chamber heater if available and does a heatsoak.
gcode:
  M400  ;Wait for everything in the planner to finish
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set print = printer["gcode_macro _PRINT_START_PHASE_INIT"].print_params %}
  {% set CHAMBER = print.CHAMBER|default(0)|int %}

  # Activates chamber heater if available
  {% if CHAMBER > 0 %}
    {% if mvar.has_active_heater_chamber is true and mvar.heat_soak is true %}
      SET_DISPLAY_TEXT MSG="ACTIVATING CHAMBER HEATER AND HEAT SOAK"
      RESPOND TYPE=command MSG="ACTIVATING CHAMBER HEATER AND HEAT SOAK"
      # Heatsoak is set to timeout after 10 minutes if chamber doesn't reach the target temperature
      HEAT_SOAK HEATER="{mvar.active_heater_name}" TARGET={CHAMBER} SOAKER="{mvar.chamber_temp_sensor}" SOAK_TEMP={CHAMBER} RATE=0.25 TEMP_SMOOTH=6 RATE_SMOOTH=30 TIMEOUT=10 HEATING_REPORT_INTERVAL=10 SOAKING_REPORT_INTERVAL=30
    {% else %}
      {% if mvar.has_active_heater_chamber is true and mvar.heat_soak is false %}
        SET_DISPLAY_TEXT MSG="ACTIVATING CHAMBER HEATER"
        RESPOND TYPE=command MSG="ACTIVATING CHAMBER HEATER"
        SET_HEATER_TEMPERATURE HEATER="{mvar.active_heater_name}" TARGET={CHAMBER}
      {% else %}
        {% if mvar.has_active_heater_chamber is false and mvar.heat_soak is true and mvar.heat_soak_bed_temp != 0.0 %}
          SET_DISPLAY_TEXT MSG="SETTING BED HEATER AND HEAT SOAK"
          RESPOND TYPE=command MSG="SETTING BED HEATER AND HEAT SOAK"
          # Heatsoak is set to timeout after 10 minutes if chamber doesn't reach the target temperature
          HEAT_SOAK HEATER=heater_bed TARGET={mvar.heat_soak_bed_temp} SOAKER="{mvar.chamber_temp_sensor}" SOAK_TEMP={CHAMBER} RATE=0.25 TEMP_SMOOTH=6 RATE_SMOOTH=30 TIMEOUT=10 HEATING_REPORT_INTERVAL=10 SOAKING_REPORT_INTERVAL=30
          SET_DISPLAY_TEXT MSG="RESTORING BED TO PRINT TEMPERATURE"
          RESPOND TYPE=command MSG="RESTORING BED TO PRINT TEMPERATURE"
          SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}
          TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}
        {% else %}
          {% if mvar.heat_soak is true %}
            SET_DISPLAY_TEXT MSG="HEAT SOAK"
            RESPOND TYPE=command MSG="HEAT SOAK"
            # Heatsoak is set to timeout after 10 minutes if chamber doesn't reach the target temperature
            HEAT_SOAK SOAKER="{mvar.chamber_temp_sensor}" SOAK_TEMP={CHAMBER} RATE=0.25 TEMP_SMOOTH=6 RATE_SMOOTH=30 TIMEOUT=10 HEATING_REPORT_INTERVAL=10 SOAKING_REPORT_INTERVAL=30
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}
  
  ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="LEVEL"

#####################################################################
# PRINT_START_PHASE_LEVEL
#####################################################################
[gcode_macro _PRINT_START_PHASE_LEVEL]
description: Voron V2 (Quad gantry level)  Voron Trident (Z Tilt)
gcode:
  M400  ;Wait for everything in the planner to finish
  _PHASE_CHECK PHASE=LEVEL
  SET_DISPLAY_TEXT MSG="PRINT_START_PHASE_LEVEL"
  RESPOND TYPE=command MSG="PRINT_START_PHASE_LEVEL"
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set print = printer["gcode_macro _PRINT_START_PHASE_INIT"].print_params %}

  STATUS_LEVELING                       ; Sets SB-leds to leveling-mode
  {% if mvar.machine_style == "VORON2" %}
    SET_DISPLAY_TEXT MSG="QUAD GANTRY LEVEL"
    RESPOND TYPE=command MSG="LEVELING"
    {% if mvar.probe_type == "carto_touch" or "beacon_touch" or "beacon" or "carto_touch" %}
      QGL ; Safe QGL for Cartographer and Beacon Probes
    {% else%}
      quad_gantry_level
    {% endif %}
    SET_DISPLAY_TEXT MSG="LEVELING COMPLETE"
  {% elif mvar.machine_style == "TRIDENT" %}
    SET_DISPLAY_TEXT MSG="Z TILT"
    RESPOND TYPE=command MSG="LEVELING"
    Z_TILT_ADJUST
    SET_DISPLAY_TEXT MSG="LEVELING COMPLETE"
  {% endif %}

  ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="MESH"

#####################################################################
# PRINT_START_PHASE_MESH
#####################################################################
[gcode_macro _PRINT_START_PHASE_MESH]
description: Starts bed mesh
gcode:
  M400  ;Wait for everything in the planner to finish
  _PHASE_CHECK PHASE=MESH
  SET_DISPLAY_TEXT MSG="PRINT_START_PHASE_MESH"
  RESPOND TYPE=command MSG="PRINT_START_PHASE_MESH"
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set print = printer["gcode_macro _PRINT_START_PHASE_INIT"].print_params %}
  {% set PRINT_MIN = print.PRINT_MIN.split(",")[0]|float, print.PRINT_MIN.split(",")[1]|float %}
  {% set PRINT_MAX = print.PRINT_MAX.split(",")[0]|float, print.PRINT_MAX.split(",")[1]|float %}
  {% set MESH_MIN = print.MESH_MIN.split(",")[0]|float, print.MESH_MIN.split(",")[1]|float %}
  {% set MESH_MAX = print.MESH_MAX.split(",")[0]|float, print.MESH_MAX.split(",")[1]|float %}
  
  {% if mvar.probe_type == "carto_touch" %}
    {% if printer.extruder.temperature > 150 + mvar.temp_delta %}
      PARK_TOOLHEAD
      M106 S255
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150.0
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={150.0 - mvar.temp_delta}
    {% endif %}
    M107
    WIPE_NOZZLE
	STATUS_HOMING   ; Sets SB-leds to homing-mode
    CARTOGRAPHER_TOUCH FUZZY=10
  {% else %}
    {% if mvar.probe_type == "beacon_touch" %}
      {% if printer.extruder.temperature > 150 + mvar.temp_delta %}
        PARK_TOOLHEAD
        M106 S255
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150.0
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={150.0 - mvar.temp_delta}
      {% endif %}
      M107
      WIPE_NOZZLE
      STATUS_HOMING   ; Sets SB-leds to homing-mode
      G28 Z  METHOD=CONTACT CALIBRATE=0
    {% endif %}
  {% endif %}
  
  {% if printer.bed_mesh is defined %}
    SET_DISPLAY_TEXT MSG="CLEARING BED MESH"
    RESPOND TYPE=command MSG="CLEARING BED MESH"
    BED_MESH_CLEAR       ; Clears old saved bed mesh (if any)
    SET_DISPLAY_TEXT MSG="BED MESH"
    RESPOND TYPE=command MSG="BED MESH"
    STATUS_MESHING  ; Sets SB-leds to bed mesh-mode
    
    {% if mvar.adaptive_bed_mesh == "slicer" %}
      # Use the Adaptive mesh margins set by the slicer
      BED_MESH_CALIBRATE mesh_min={MESH_MIN[0]},{MESH_MIN[1]} mesh_max={MESH_MAX[0]},{MESH_MAX[1]} PROFILE=ADAPTIVE_SLICER_PRINT ADAPTIVE=0 ADAPTIVE_MARGIN=0
    {% else %}
      # Let Klipper set the Adaptive Mesh
      BED_MESH_CALIBRATE mesh_min={PRINT_MIN[0]},{PRINT_MIN[1]} mesh_max={PRINT_MAX[0]},{PRINT_MAX[1]} PROFILE=ADAPTIVE_PRINT ADAPTIVE=1 ADAPTIVE_MARGIN={mvar.adaptive_bed_mesh_margin}
    {% endif %}

    SET_DISPLAY_TEXT MSG="BED MESH COMPLETE"
    RESPOND TYPE=command MSG="BED MESH COMPLETE"
  {% endif %}

  ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="EXTRUDER"

#####################################################################
# PRINT_START_PHASE_EXTRUDER
#####################################################################
[gcode_macro _PRINT_START_PHASE_EXTRUDER]
description: Heat extruder to print temperature

variable_mmu_params: {}

gcode:
  M400  ;Wait for everything in the planner to finish
  _PHASE_CHECK PHASE=EXTRUDER
  SET_DISPLAY_TEXT MSG="PRINT_START_PHASE_EXTRUDER"
  RESPOND TYPE=command MSG="PRINT_START_PHASE_EXTRUDER"

  {%for x in params %}
    {% set dummy = mmu_params.__setitem__(x|upper, params[x]) %}
  {% endfor %}

  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set print = printer["gcode_macro _PRINT_START_PHASE_INIT"].print_params %}
  {% set EXTRUDER = print.EXTRUDER|default(220)|int %}

  ### PARK TOOLHEAD ###
  PARK_TOOLHEAD
  # Check if using an MMU, then make sure all required parameters are present from the slicer. 
  {% if mvar.mmu is true %}
    {% set expected_params = ('INITIAL_TOOL', 'REFERENCED_TOOLS', 'TOOL_COLORS', 'TOOL_TEMPS', 'TOOL_MATERIALS', 'FILAMENT_NAMES', 'PURGE_VOLUMES') %}
    {% set missing_params = expected_params|reject('in', params)|list %}
    {% if missing_params %}
        { action_raise_error ("Error: Missing print parameters from the slicer. \n '%s' " % missing_params|sort|join(", ")) }
    {% endif%}
    # Start the MMU
    MMU_START_SETUP {rawparams}
    MMU_START_CHECK
    MMU_START_LOAD_INITIAL_TOOL
  {% endif %}
  
  ### Heats up the nozzle up to target via data from slicer ###
  SET_DISPLAY_TEXT MSG='{"Setting \"%s\" temperature to %3.1f\u00B0C," % (printer.toolhead.extruder|upper, EXTRUDER)}'
  RESPOND TYPE=command MSG='{"Setting \"%s\" temperature to %3.1f\u00B0C," % (printer.toolhead.extruder|upper, EXTRUDER)}'
  STATUS_HEATING                                               ; Sets SB-leds to heating-mode
  M107                                                         ; Turns off partcooling fan
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER}
  SET_DISPLAY_TEXT MSG="EXTRUDER TEMPERATURE REACHED"
  RESPOND TYPE=command MSG="EXTRUDER TEMPERATURE REACHED"

  ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="PRIME"

#####################################################################
# PRINT_START_PHASE_PRIME
#####################################################################
[gcode_macro _PRINT_START_PHASE_PRIME]
description: Gets ready to print by doing a purge line and updating the SB-leds
gcode:
  M400  ;Wait for everything in the planner to finish
  _PHASE_CHECK PHASE=PRIME
  SET_DISPLAY_TEXT MSG="_PRINT_START_PHASE_PRIME"
  RESPOND TYPE=command MSG="_PRINT_START_PHASE_PRIME"
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set print = printer["gcode_macro _PRINT_START_PHASE_INIT"].print_params %}
  {% set PRINT_MIN = print.PRINT_MIN|float %}
  {% set PRINT_MAX = print.PRINT_MAX|float %}
  {% set MESH_MIN = print.MESH_MIN|float %}
  {% set MESH_MAX = print.MESH_MAX|float %}
  {% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
  
  WIPE_NOZZLE ; Quick nozzle wipe.

  ### Nozzle Prime Line ###
  {% if mvar.start_purge_length > 0.0 and printer.extruder.can_extrude %}
    SET_DISPLAY_TEXT MSG="BEGINING NOZZLE PRIME"
    RESPOND TYPE=command MSG="BEGINING NOZZLE PRIME"
    _NOZZLE_PRIME WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.75}"
                  {% if MESH_MIN %} PRINT_MIN={MESH_MIN} {% endif %} {% if MESH_MAX %} PRINT_MAX={MESH_MAX} {% endif %}
  {% endif %}
  
  G90                   ; Absolute Positioning for all axes
  M83                   ; Set EXTRUDER to relative mode
  G92 E0                ; Reset Extruder
  
  ### SET NEXT PRINT PHASE ###
  _PRINT_PHASE PRINT_PHASE="PRINTING"
  SET_DISPLAY_TEXT MSG="PRINTING"
  RESPOND TYPE=echo MSG="PRINTING"
  SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=status VALUE='"PRINTING"'
  STATUS_PRINTING       ; Sets SB-leds to printing-mode


#####################################################################
# PRINT END
#####################################################################
[gcode_macro PRINT_END]
description:
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=status VALUE='"PRINT_END"'
  STATUS_BUSY
  M400  ;Wait for everything in the planner to finish
  _CHECK_IS_PRINTING
  {% if mvar.mmu is true and printer.idle_timeout.state == "Printing"  %}
    {% if printer['gcode_macro _MMU_CLIENT_VARS'].unload_tool_on_cancel is false or printer['gcode_macro _MMU_SOFTWARE_VARS'].unload_tool is false %}
	  PARK_TOOLHEAD
	{% endif %}
    MMU_END
  {% else %}
    G1 E-5 F1500 ;retract
    PARK_TOOLHEAD
  {% endif %}
  M400  ;Wait for everything in the planner to finish
  TURN_OFF_HEATERS
  {% if printer.gcode_move.gcode_position.z > 0  %}
    _RESET_LAYER_GCODE
  {% endif %}
  M107  ; turn off fan
  CLEAR_PAUSE
  SET_GCODE_VARIABLE MACRO=_PRINT_PHASE VARIABLE=phase VALUE="{{}}"
  STATUS_PART_READY
  {% if 'virtual_sdcard' in printer and not printer.virtual_sdcard.is_active %}
    SDCARD_RESET_FILE
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_MACRO_VARIABLES VARIABLE=status VALUE='"READY"'
  RESPOND TYPE=echo MSG="PRINT COMPLETE"
  {% if mvar.air_scrubber is true %}
    _CHAMBER_AIR_SCRUBBER_ENDPRINT
  {% endif %}


#####################################################################
# CHAMBER SCRUBBER FANS
#####################################################################
[delayed_gcode _CHAMBER_AIR_SCRUBBER_OFF]
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% if mvar.air_scrubber_qty == 1 %}
    SET_FAN_SPEED FAN="{mvar.air_scrubber_name}" SPEED=0
    RESPOND TYPE=command MSG='{"'%s' has been deactivated" % (mvar.air_scrubber_name|string|upper)}'
  {% else %}
    {% set scrubber_name = mvar.air_scrubber_name|string|lower %}
    {% set scrubber_qty = mvar.air_scrubber_qty|default(1)|int %}
    {% for i in range(1, scrubber_qty + 1) %}
      {% set new_scrubber_name = "{}_{}".format(scrubber_name, i) %}
      SET_FAN_SPEED FAN="{new_scrubber_name}" SPEED=0
      RESPOND TYPE=command MSG='{"'%s' has been deactivated" % (new_scrubber_name|string|upper)}'
    {% endfor %}
  {% endif %}

[gcode_macro _CHAMBER_AIR_SCRUBBER_ENDPRINT]
description: Turns purifier fans off after set time in minutes after a print ends
gcode:
  {% set mvar = printer["gcode_macro _MACRO_VARIABLES"] %}
  {% set percent = mvar.air_scrubber_end_speed * 100|round(2)|float %}
  {% if mvar.air_scrubber is true %}
    {% if mvar.air_scrubber_qty == 1 %}
      SET_FAN_SPEED FAN="{mvar.air_scrubber_name}"|lower SPEED={mvar.air_scrubber_end_speed}
      {action_respond_info("'%s' has been set to %s%%" % (mvar.air_scrubber_name|string|upper, percent|string))}
    {% else %}
      {% set scrubber_name = mvar.air_scrubber_name|string|lower %}
      {% set scrubber_qty = mvar.air_scrubber_qty|default(1)|int %}
      {% for i in range(1, scrubber_qty + 1) %}
        {% set new_scrubber_name = "{}_{}".format(scrubber_name, i) %}
        SET_FAN_SPEED FAN="{new_scrubber_name}" SPEED={mvar.air_scrubber_end_speed}
        {action_respond_info("'%s' has been set to %s%%" % (new_scrubber_name|string|upper, percent|string))}
      {% endfor %}
    {% endif %}
    {% set minutes = (mvar.air_scrubber_end_duration * 60)|int %}
    UPDATE_DELAYED_GCODE ID=_CHAMBER_AIR_SCRUBBER_OFF DURATION={minutes}
    {action_respond_info("Chamber air scrubber will be shut off in %s minutes" % (mvar.air_scrubber_end_duration))}
  {% endif %}

#####################################################################
# _PHASE_CHECK
#####################################################################
[gcode_macro _PHASE_CHECK]
description:

variable_cancel: False

gcode:

  {% if printer['virtual_sdcard'].file_position == 0.0  %}  
    {action_respond_info("A change was detected in virtual_sdcard print state, PRINT CANCELED")}
    CANCEL_PRINT
  {% elif cancel == True %} # TODO: figure out how to incorporate to work as intended.
    {action_respond_info("Print state has been changed, PRINT CANCELED")}
    CANCEL_PRINT
  {% else%}
    {% set variable = printer["gcode_macro _PRINT_PHASE"].phase %}
    {% set PRINT_PHASE = variable.PRINT_PHASE|default("INIT")|upper %}
    {% if PRINT_PHASE != params.PHASE|upper %}
      SET_GCODE_VARIABLE MACRO=_PRINT_PHASE VARIABLE=phase VALUE="{{}}"
      {% if params.PHASE != 'INIT' %}
        {% set error = "PRINT_START phase error. Expected '%s' but found '%s'" %
                         (params.PHASE|upper, PRINT_PHASE|upper) %}
        {% if not 'virtual_sdcard' in printer or
              not printer.virtual_sdcard.is_active or 'CANCEL_PRINT' not in
                printer.configfile.settings.virtual_sdcard.on_error_gcode|
                default("")|upper %}
          {action_respond_info("ERROR")}
          CANCEL_PRINT
        {% else %}
          {action_raise_error("ERROR")}
        {% endif %}
      {% else %}
        { action_respond_info("Expected phase '%s' but found '%s'. Resetting." % (params.PHASE|upper, PRINT_PHASE|upper)) }
      {% endif %}
    {% endif %}
  {% endif %}


#####################################################################
# _PRINT_PHASE
#####################################################################
[gcode_macro _PRINT_PHASE]
description:

variable_phase: {}

gcode:
  {%for x in params %}
    {% set dummy = phase.__setitem__(x|upper, params[x]) %}
  {% endfor %}


#####################################################################
# _CHECK_IS_PRINTING
#####################################################################
[gcode_macro _CHECK_IS_PRINTING]
description:

variable_debug_state: False # Disables print state check for debugging.

gcode:
  {% if not debug_state and printer.idle_timeout.state|string != "Printing" and 
    not (printer.virtual_sdcard|default({})).is_active|default(False) and not printer.pause_resume.is_paused %}
    {action_raise_error("No active print.")}
  {% endif %}


#####################################################################
# HOMEING_PROMPT_PRINT
#####################################################################
[gcode_macro HOMEING_PROMPT_PRINT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Axes Homing Error"
  RESPOND TYPE=command MSG="action:prompt_text Attention: Printer axes are not homed. Would you like to home axes?"
  RESPOND TYPE=command MSG="action:prompt_footer_button Home_Axes|HOME_PRINT"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro HOME_PRINT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  STATUS_HOMING   ; Sets SB-leds to homing-mode
  G28
  M400
  STATUS_READY
  _PRINT_START_PHASE_INIT
