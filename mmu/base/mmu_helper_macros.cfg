#########################################################################################################
# MMU_ACTION_EXT  ADD MACRO TO MMU_MACRO_VARS: variable_user_action_changed_extension 'MMU_ACTION_EXT'
#########################################################################################################
# Idle           No action being performed
# Loading        Filament loading
# Unloading      Filamdng unloading
# Loading Ext    Loading filament into the extruder (usually occurs after Loading)
# Exiting Ext    Unloading filament from the extruder (usually after Foriming Tip and before Unloading)
# Forming Tip    When running standalone tip forming (cannot detect when slicer does it)
# Heating        When heating the nozzle
# Checking       Checking gates for filament (MMU_CHECK_GATE)
# Homing         Homing the selector
# Selecting      When the selector is moving to select a new filament
# Unknown        Should not occur

[gcode_macro MMU_ACTION_EXT]
description: 

gcode:
  {% set action = params.ACTION|string|lower %}
  
  {% if action == 'idle' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}"
  {% elif action == 'loading' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}"
  {% elif action == 'unloading' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}"
  {% elif action == 'loading ext' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}"
  {% elif action == 'exiting ext' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}" 
  {% elif action == 'forming tip' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}" 
  {% elif action == 'checking' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}" 
  {% elif action == 'homing' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}" 
  {% elif action == 'selecting' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}" 
  {% elif action == 'unknown' %}
    DISPLAY_EVENT_NAME ACTION_NAME="{action}" 
  {% endif %}


########################################################################################################################
# MMU_PRINT_STATE_EXT ADD MACRO TO MMU_MACRO_VARS: variable_user_print_state_changed_extension 'MMU_PRINT_STATE_EXT'
########################################################################################################################
# initialized    State occurs on first bootup or after initialization command like `MMU_RESET` or `MMU ENABLE=0 -> MMU ENABLE=1`
# ready          MMU is idle out of a print
# started        Short lived state the occurs during the startup phase when starting a print
# printing       State meaning that a print is underway
# complete       End state that occurs after a print has sucessfully finished printing
# cancelled      End state that occurs if a print is cancelled
# error          End state when a print ends in an error
# pause_locked   State that indicates MMU has experienced and error and certain features are locked until `MMU_UNLOCK` is run
# paused         State that occurs after `MMU_UNLOCK`
# standby        Printer has been idle for extended period of time

[gcode_macro MMU_PRINT_STATE_EXT]
description: 

gcode:
  {% set state = params.STATE|string|lower %}
  
  {% if state == 'initialized' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'ready' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'started' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'printing' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'complete' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'cancelled' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'error' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'pause_locked' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'paused' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% elif state == 'standby' %}
    DISPLAY_EVENT_NAME STATE_NAME="{state}"
  {% endif %}
  

##################################################################################################
# MMU_EVENT_EXT  ADD MACRO TO MMU_MACRO_VARS: variable_user_mmu_event_extension 'MMU_EVENT_EXT'
##################################################################################################
[gcode_macro MMU_EVENT_EXT]
description: 

gcode:
  {% set event = params.EVENT|string|lower %}

  {% if event == 'restart' %}
    DISPLAY_EVENT_NAME EVENT_NAME="{event}"
    # ADD ALL G CODE MACROS YOU WANT TO RUN AFTER MMU STATE IS 'RESTARTED'/READY, 
    # ADDING M400 AFTER EACH MACRO ENSURES IT FINISHES BEFOR THE NEXT ONE IS CALLED
    _BLOBIFIER_INIT
    M400
    BLOBIFIER_SERVO POS=OUT
    BLOBIFIER_SERVO POS=IN
    M400
  {% elif event == 'gate_map_changed' %}
    DISPLAY_EVENT_NAME EVENT_NAME="{event}"
  {% elif event == 'filament_gripped' %}
    DISPLAY_EVENT_NAME EVENT_NAME="{event}"
  {% elif event == 'filament_cut' %}
    DISPLAY_EVENT_NAME EVENT_NAME="{event}"
  {% endif %}


################################################
# DISPLAY_EVENT_NAME
################################################
[gcode_macro DISPLAY_EVENT_NAME]
description: Displays the Action, State or Event that Happy Hare has triggered.
gcode:
  {% if params.EVENT_NAME %}
    {% set name = params.EVENT_NAME|string|lower %}
    {% set cond = 'event' %}
  {% elif params.STATE_NAME %}
    {% set name = params.STATE_NAME|string|lower %}
    {% set cond = 'state' %}
  {% elif params.ACTION_NAME %}
    {% set name = params.ACTION_NAME|string|lower %}
    {% set cond = 'action' %}
  {% endif %}

  {action_respond_info("HAPPY HARE %s TRIGGERED '%s'" % (cond|string|upper, name|string|upper))}


################################################
# MMU_PRE_INT_EXT
################################################
[gcode_macro MMU_PRE_INT_EXT]
description: Initiate macros before a print

gcode:
    MMU_SAVE_VARIABLES {rawparams}


     
################################################
# MMU_ENABLE
################################################
[gcode_macro MMU_ENABLE]
description: Turn MMU on or off
gcode:
    {% set STATE = params.STATE|default(1)|int %}
    MMU ENABLE={STATE}


################################################
# MMU_CALIBRATE_SELECTOR
################################################
[gcode_macro MMU__CALIBRATE_SELECTOR]
description: Step 1: Calibrates the Selector Positioning 
             Leave "GATE" blank for all gates or select the gate to calibrate. 0 - N
             Remember this will extrapolate from measurements form Gate Zero.
             If enabled "SINGLE" will calibrate individual gate distances.            
gcode:
    {% set SINGLE = params.SINGLE|default('')|int %}
    {% set GATE = params.GATE_NUMBER|default('')|int %}
    {% set BYPASS = params.BYPASS|default('')|int %}
    {% set SAVE = params.SAVE|default(1)|int %}
    
    {% if SINGLE != 1 and GATE == '' and BYPASS != 1 %}
      {% if SAVE != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
        MMU_CALIBRATE_SELECTOR SAVE={SAVE}
      {% else %}
        MMU_CALIBRATE_SELECTOR
      {% endif %}
    {% else %}
      {% if SINGLE != 1 and GATE != '' and BYPASS != 1 %}
        {% if SAVE != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
          MMU_CALIBRATE_SELECTOR GATE={GATE} SAVE={SAVE}
        {% else %}
          MMU_CALIBRATE_SELECTOR GATE={GATE}
        {% endif %}
      {% else %}
        {% if SINGLE == 1 and GATE != '' and BYPASS != 1 %}
          SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=gate VALUE={GATE} # TRANSFER THE GATE NUMBER TO CALIBRATE
          SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=save VALUE={SAVE} # TRANSFER SAVE FOR TEST PURPOSE
          MMU_SERVO POS=MOVE
          M117 SELECTOR SERVO TO MOVE POSITION
          MMU_MOTORS_OFF
          M117 MOTORS OFF
          _CALIBRATE_MMU_GATE_PROMPT
        {% else %}
          {% if GATE == '' and SINGLE != 1 and BYPASS != 0 %}
            SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=gate VALUE={GATE} # TRANSFER THE GATE NUMBER TO CALIBRATE
            SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=save VALUE={SAVE} # TRANSFER SAVE FOR TEST PURPOSE
            SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=bypass VALUE={BYPASS}
            MMU_SERVO POS=MOVE
            M117 SELECTOR SERVO TO MOVE POSITION
            MMU_MOTORS_OFF
            M117 MOTORS OFF
            _CALIBRATE_MMU_GATE_BYPASS
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}

[gcode_macro _CALIBRATE_MMU_GATE_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Single Gate Position Calibration"
  RESPOND TYPE=command MSG="action:prompt_text Move selector to gate position. Using a piece of filament, align gate with selector and then hit continue"
  RESPOND TYPE=command MSG="action:prompt_footer_button CONTINUE|_MMU_SINGLE_GATE_CAL"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _MMU_SINGLE_GATE_CAL]
variable_single: 1
variable_gate: 0
variable_save: 1                    # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION

gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  MMU_SERVO POS=MOVE
  M117 SELECTOR SERVO TO MOVE POSITION
  {% if save != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
    MMU_CALIBRATE_SELECTOR SINGLE={single} GATE={gate} SAVE{save}
  {% else %}
    MMU_CALIBRATE_SELECTOR SINGLE={single} GATE={gate}
  {% endif %}


  [gcode_macro _CALIBRATE_MMU_GATE_BYPASS]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Bypass Position Calibration"
  RESPOND TYPE=command MSG="action:prompt_text Move selector to bypass position. Using a piece of filament, align bypass with selector and then hit continue"
  RESPOND TYPE=command MSG="action:prompt_footer_button CONTINUE|_MMU_CAL_GATE_BYPASS"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _MMU_CAL_GATE_BYPASS]
variable_single: 0
variable_gate: 0
variable_save: 1                    # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
variable_bypass: 1

gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  MMU_SERVO POS=MOVE
  M117 SELECTOR SERVO TO MOVE POSITION
  {% if SAVE != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
    MMU_CALIBRATE_SELECTOR BYPASS={bypass} SAVE={save}
  {% else %}
    MMU_CALIBRATE_SELECTOR BYPASS={bypass}
  {% endif %}
  
  
################################################
# MMU_CALIBRATE_GATES
################################################
[gcode_macro MMU__CALIBRATE_GATES]
description: Optional calibration of each gates rotaion distance. 
              This is calculated as a ratio of gate ZERO and 
              thus this is usually the last calibration step
gcode:
    {% set ALL = params.ALL_GATES|default('')|int %}
    {% set GATE = params.GATE_NUMBER|default('')|int %}
    {% set LENGTH = params.GATE_NUMBER|default(400)|int %}
    {% set REPEATS = params.GATE_NUMBER|default(3)|int %}
    {% set SAVE = params.GATE_NUMBER|default(1)|int %}
    {% if ALL != '' %}
      MMU_CALIBRATE_GATES ALL={ALL} LENGTH={LENGTH} REPEATS={REPEATS} SAVE={SAVE}
    {% elif ALL == '' and GATE != '' %}
      MMU_CALIBRATE_GATES GATE={GATE} LENGTH={LENGTH} REPEATS={REPEATS} SAVE={SAVE}
    {% endif %}


################################################
# MMU_TEST_MOVE
################################################
[gcode_macro MMU__TEST_MOVE]
description: Run a length of filamet through a gate
gcode: 
    {% set GATE_NUMBER = params.GATE_NUMBER|default(0)|int %}
    {% set TEST_LENGTH = params.TEST_LENGTH|default(100)|float %}
    {% if printer.mmu.enabled and not printer.mmu.is_homed %}
        HOMEING_PROMPT_MMU
    {% endif %} 
    MMU_SERVO POS=MOVE
    M117 SELECTOR SERVO TO MOVE POSITION
    M400
    MMU_SELECT GATE={GATE_NUMBER}
    M400
    MMU_SERVO POS=DOWN
    M117 SELECTOR SERVO TO DOWN POSITION
    M400
    MMU_TEST_MOVE MOVE={TEST_LENGTH}

[gcode_macro HOMEING_PROMPT_MMU]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin MMU HOMING ERROR"
  RESPOND TYPE=command MSG="action:prompt_text Attention: MMU is not homed. Would you like to home the MMU?"
  RESPOND TYPE=command MSG="action:prompt_footer_button Home_MMU|HOME_MMU_TEST_MOVE"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro HOME_MMU_TEST_MOVE]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  MMU_SERVO POS=MOVE
  M117 SELECTOR SERVO TO MOVE POSITION
  MMU_HOME
  MMU__TEST_MOVE {rawparams}


################################################
# MMU_CALIBRATE_GEAR
################################################
[gcode_macro MMU__CALIBRATE_GEAR_ROTATION]
description: Step 3: Calibrates the rotaition of the filament feed stepper
gcode:
    {% set MEASURED = params.ACTUAL_MEASUREMENT|default()|float %}
    {% set TEST_LENGTH = params.TEST_LENGTH|default(100)|float %}
    {% set SAVE = params.SAVE|default(1)|int %}
    
    MMU_CALIBRATE_GEAR MEASURED={MEASURED} LENGTH={TEST_LENGTH} SAVE={SAVE}

[gcode_macro MMU__CALIBRATE_GEAR_RESET]
description: Resets the rotaition of the filament feed stepper
gcode:
    MMU_CALIBRATE_GEAR RESET=1


################################################
# MMU_CALIBRATE_BOWDEN
################################################
[gcode_macro MMU__CALIBRATE_BOWDEN]
description: Calibrates the bowden tube length
gcode:
    {% set LENGTH = params.BOWDEN_LENGTH|default()|float %}
    {% set HOMING_MAX = params.HOMING_MAX|default(100)|float %}
    {% set REPEATS = params.REPEATS|default(3)|int %}
    {% set SAVE = params.SAVE|default(1)|int %}
    MMU_CALIBRATE_BOWDEN BOWDEN_LENGTH={LENGTH} HOMING_MAX={HOMING_MAX} REPEATS={REPEATS} SAVE={SAVE}


################################################
# MMU_CALIBRATE_ENCODER
################################################
[gcode_macro MMU__CALIBRATE_ENCODER]
description: Calibrates encoder rotaion
gcode:
    {% set LENGTH = params.LENGTH|default(500)|int %}
    {% set REPEATS = params.REPEATS|default(6)|int %}
    {% set SPEED = params.SPEED|default(150)|int %}
    {% set ACCEL = params.ACCEL|default(4000)|int %}
    {% set SAVE = params.SAVE|default(1)|int %}
    
    MMU_CALIBRATE_ENCODER LENGTH={LENGTH} REPEATS={REPEATS} SPEED={SPEED} ACCEL={ACCEL} SAVE={SAVE}


################################################
# MMU_CALIBRATE_TOOLHEAD
################################################
[gcode_macro MMU_CALIBRATE_TOOLHEAD_SENSORS]
description: Optional calibration of key toolhead dimension and 
            toolhead cutting variables.
gcode:
    MMU_CALIBRATE_TOOLHEAD CLEAN=1

[gcode_macro MMU_CALIBRATE_TOOLHEAD_CUT_TIP]
description: Optional calibration of key toolhead dimension and 
            toolhead cutting variables.
gcode:
    MMU_CALIBRATE_TOOLHEAD CUT=1

[gcode_macro MMU_CALIBRATE_TOOLHEAD_OOZE_REDUCTION]
description: Optional calibration of key toolhead dimension and 
            toolhead cutting variables.
gcode:
    MMU_CALIBRATE_TOOLHEAD


################################################
# MMU_SERVO_UP
################################################
[gcode_macro MMU__SERVO_UP]
description: Move the servo to position
gcode:
    MMU_SERVO POS=UP
    M117 SELECTOR SERVO TO UP POSITION


################################################
# MMU_SERVO_DOWN
################################################
[gcode_macro MMU__SERVO_DOWN]
description: Move the servo to position
gcode:
    MMU_SERVO POS=DOWN
    M117 SELECTOR SERVO TO DOWN POSITION


################################################
# MMU_SERVO_MOVE
################################################
[gcode_macro MMU__SERVO_MOVE]
description: Move the servo to position
gcode:
    MMU_SERVO POS=MOVE
    M117 SELECTOR SERVO TO MOVE POSITION


################################################
# MMU_SERVO_ANGLE
################################################
[gcode_macro MMU__SERVO_ANGLE]
description: Sets the servo angle
gcode:
    {% set ANGLE = params.ANGLE|default('0')|int %}
    MMU_SERVO ANGLE={ANGLE}


################################################
# MMU_SERVO_SAVE_UP
################################################
[gcode_macro MMU__SERVO_SAVE_UP]
description: Saves the servo position up
gcode:
    MMU_SERVO POS=UP SAVE=1


################################################
#MMU_SERVO_SAVE_MOVE
################################################
[gcode_macro MMU__SERVO_SAVE_MOVE]
description: Saves the servo position move
gcode:
    MMU_SERVO POS=MOVE SAVE=1


################################################
# MMU_SERVO_SAVE_DOWN
################################################
[gcode_macro MMU__SERVO_SAVE_DOWN]
description: Saves the servo position down
gcode:
    MMU_SERVO POS=DOWN SAVE=1


################################################
# MMU_SENSORS
################################################
[gcode_macro MMU__SENSORS]
description: Report on the state of all sensors connected to the MMU
            DETAIL=[0|1] Whether to show all disabled sensors or just active ones
gcode:
    {% set DETAIL = params.DETAIL|default(1)|int %}
    MMU_SENSORS DETAIL={DETAIL}


################################################
# MMU_CALC_PURGE_VOLUMES
################################################
[gcode_macro MMU__CALC_PURGE_VOLUMES]
description: Calculate purge volume matrix based on filament
             color and algorithm for estimating flushing volume
gcode: 
    {% set MIN = params.PURGE_MINIMUM|default(0)|int %}
    {% set MAX = params.PURGE_MAXIMUM|default(800)|int %}
    {% set MULTIPLIER = params.MULTIPLIER|default(1.0)|int %}
    MMU_CALC_PURGE_VOLUMES MIN={MIN} MAX={MAX} MULTIPLIER={MULTIPLIER}


################################################
# MMU_LED
################################################
[gcode_macro MMU__LED]
description: Quick way to try or test modes of operation of optional MMU LEDs
            off|gate_status|filament_color|slicer_color 
gcode: 
    {% set ENABLE = params.ENABLE|default(1)|int %}
    {% set ANIMATION = params.ANIMATION|default(1)|int %}
    {% set ENTRY_EFFECT = params.ENTRY_EFFECT|default('gate_status')|string|upper %}
    {% set EXIT_EFFECT = params.EXIT_EFFECT|default('gate_status')|string|upper %}
    {% set FILAMENT_COLOR = params.FILAMENT_COLOR|default('slicer_color')|string|upper %}
    {% set QUIET = params.QUIET|default(0)|int %}

    MMU_LED ENABLE={ENABLE} ANIMATION={ANIMATION} ENTRY_EFFECT="{ENTRY_EFFECT}" EXIT_EFFECT="{EXIT_EFFECT}" FILAMENT_COLOR="{FILAMENT_COLOR}" QUIET={QUIET}



################################################
# MMU_SOAKTEST_SELECTOR
################################################
[gcode_macro MMU__SOAKTEST_SELECTOR]
description: Calculate purge volume matrix based on filament
             color and algorithm for estimating flushing volume
gcode: 
    {% set LOOP = params.LOOP|default(25)|int %}
    {% set SERVO = params.SERVO|default(1)|int %}
    {% set HOME = params.HOME|default(1)|int %}
    MMU_SOAKTEST_SELECTOR LOOP={LOOP} SERVO={SERVO} HOME={HOME}


################################################
# MMU_SOAKTEST_LOAD_SEQUENCE
################################################
[gcode_macro MMU__SOAKTEST_LOAD_SEQUENCE]
description: Calculate purge volume matrix based on filament
             color and algorithm for estimating flushing volume
gcode: 
    {% set LOOP = params.LOOP|default(10)|int %}
    {% set RANDOM = params.RANDOM|default(1)|int %}
    {% set FULL = params.FULL|default(1)|int %}
    MMU_SOAKTEST_SELECTOR LOOP={LOOP} RANDOM={RANDOM} FULL={FULL}


################################################
# MMU_ENDLESS_SPOOL
################################################
[gcode_macro MMU__ENDLESS_SPOOL]
description:
gcode:
	{% set ENABLE = params.ENABLE|default('') %}
	{% set GROUPS = params.GROUPS|default('') %}
	
	{% if ENABLE == '' and GROUPS == '' %}
	  MMU_ENDLESS_SPOOL
	{% elif ENABLE != '' and GROUPS != '' %}
	  MMU_ENDLESS_SPOOL ENABLE={ENABLE} GROUPS={GROUPS}
	{% elif ENABLE != '' and GROUPS == '' %}
	  MMU_ENDLESS_SPOOL ENABLE={ENABLE}
	{% elif ENABLE == '' and GROUPS != '' %}
	  MMU_ENDLESS_SPOOL GROUPS={GROUPS}
	{% endif %}
	
	
################################################
# MMU_TTG_MAP
################################################
[gcode_macro MMU__TTG_MAP]
description:

gcode:
	{% set RESET = params.RESET|default('') %}
	{% set TOOL = params.TOOL|default('') %}
	{% set GATE = params.GATE|default('') %}
	{% set AVAILABLE = params.AVAILABLE|default('') %}
	{% set QUIET = params.QUIET|default('') %}
	{% set MAP = params.QUIET|default('') %}

    {% if RESET == '' and TOOL == '' and GATE == '' and AVAILABLE == '' and QUIET == '' and MAP == '' %}
	  MMU_TTG_MAP
	{% elif RESET != '' and TOOL == '' and GATE == '' and AVAILABLE == '' and QUIET == '' and MAP == '' %}
	  MMU_TTG_MAP RESET={RESET}
	{% elif RESET == '' and TOOL != '' and GATE != '' and AVAILABLE == '' and QUIET == '' and MAP == '' %}
	  MMU_TTG_MAP TOOL={TOOL} GATE={GATE}
	{% elif RESET == '' and TOOL == '' and GATE != '' and AVAILABLE != '' and QUIET == '' and MAP == '' %}
	  MMU_TTG_MAP  GATE={GATE} AVAILABLE={AVAILABLE}
	{% elif RESET == '' and TOOL == '' and GATE == '' and AVAILABLE == '' and QUIET != '' and MAP == '' %}
      MMU_TTG_MAP  QUIET={QUIET}
    {% elif RESET == '' and TOOL == '' and GATE == '' and AVAILABLE == '' and QUIET == '' and MAP != '' %}
	  MMU_TTG_MAP  MAP="{MAP}"
	{% endif %}


################################################
# MMU_SAVE_VARIABLES
################################################
[gcode_macro MMU_SAVE_VARIABLES]
description: Saves mmu variables to printer.save_variables.variables.
        USE: "{% set variable = printer.save_variables.variables.mmu_print_<variable> %}"
  
variable_mmu_params: {}

gcode:
  {%for x in params %}
    {% set dummy = mmu_params.__setitem__(x|upper, params[x]) %}
  {% endfor %}
  
  {% set ttg_map = printer.mmu.ttg_map %}
  {% set num_gates = ttg_map|length %}
  {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
  
  SAVE_VARIABLE VARIABLE=mmu_print_num_gates VALUE="{num_gates}"
  
  SAVE_VARIABLE VARIABLE=mmu_print_initial_tool VALUE="{initial_tool}"
  
  {% set referenced_tools = (params.REFERENCED_TOOLS|default("!referenced_tools!")|string).split(",")
    if (params.REFERENCED_TOOLS and params.REFERENCED_TOOLS != "") else [] %}
  SAVE_VARIABLE VARIABLE=mmu_print_referenced_tools VALUE="{referenced_tools|list}"
  
  {% set tool_colors = (params.TOOL_COLORS|default("")|string).split(",")
    if (params.TOOL_COLORS and params.TOOL_COLORS != "!colors!" and params.TOOL_COLORS != "") else ['000000'] * num_gates %}
  SAVE_VARIABLE VARIABLE=mmu_print_tool_colors VALUE="{tool_colors|list}"
  
  {% set tool_materials = (params.TOOL_MATERIALS|default("")|string).split(",")
    if (params.TOOL_MATERIALS and params.TOOL_MATERIALS != "!materials!" and params.TOOL_MATERIALS != "")
    else ['unknown'] * num_gates %}
  SAVE_VARIABLE VARIABLE=mmu_print_tool_materials VALUE="{tool_materials|list}"
  
  {% set filament_names = (params.FILAMENT_NAMES|default("")|string).split(",")
    if (params.FILAMENT_NAMES and params.FILAMENT_NAMES != "!filament_names!" and params.FILAMENT_NAMES != "")
    else [''] * num_gates %}
  SAVE_VARIABLE VARIABLE=mmu_print_filament_names VALUE="{filament_names|list}"
  
  {% set purge_volumes = (params.PURGE_VOLUMES|default("")|string)
    if (params.PURGE_VOLUMES and params.PURGE_VOLUMES != "!purge_volumes!" and params.PURGE_VOLUMES != "") else "" %}
  SAVE_VARIABLE VARIABLE=mmu_print_purge_volumes VALUE="{purge_volumes}" 
  
  {% set total_toolchanges = params.TOTAL_TOOLCHANGES|default(0)|int %}
  SAVE_VARIABLE VARIABLE=mmu_print_total_toolchanges VALUE="{total_toolchanges}"
  
  {% set tool_temps_str = params.TOOL_TEMPS %}
    {% if tool_temps_str %}
      {% set tool_temps_list_str = tool_temps_str.split(',') %}
      {% set tool_temps = [] %}
      {% for temp_str in tool_temps_list_str %}
        {% set temp_int = temp_str|int %}
        {% set dummy = tool_temps.append(temp_int) %}
      {% endfor %}
        {action_respond_info("TOOL_TEMPS %s" % (tool_temps|list))}
    {% else %}
      {action_raise_error("Error: TOOL_TEMPS are not defined. I'm not sure how you made it this far! Please check your slicer for the gcode pre-processor entry !temperatures!")}
    {% endif %}
  SAVE_VARIABLE VARIABLE=mmu_print_tool_temps VALUE="{tool_temps|list}"
  
  {% if printer.configfile.config.mmu.default_extruder_temp or printer['gcode_macro BLOBIFIER'].purge_temp_min < tool_temps[initial_tool] %}
    SET_GCODE_VARIABLE MACRO=BLOBIFIER VARIABLE=purge_temp_min VALUE={initial_tool}
  {% endif %} 



[gcode_macro _SIMPLE_RETRACT]
description: 
gcode:
  G1 E-100 F3000
