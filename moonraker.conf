[server]
host: 0.0.0.0
port: 7125
# The maximum size allowed for a file upload (in MiB).  Default 1024 MiB
max_upload_size: 1024
# Path to klippy Unix Domain Socket
klippy_uds_address: ~/printer_data/comms/klippy.sock
max_websocket_connections: 50

[file_manager]
# post processing for object cancel. Not recommended for low resource SBCs such as a Pi Zero. Default False
enable_object_processing: True

[authorization]
default_source: moonraker
enable_api_key: True
force_logins: False
cors_domains:
    https://my.mainsail.xyz
    http://my.mainsail.xyz
    http://*.local
    http://*.lan
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.50.0/24
    FE80::/10
    ::1/128

# enables partial support of Octoprint API
[octoprint_compat]

# enables moonraker to track and store print history.
[history]

# this enables moonraker announcements for mainsail
[announcements]
subscriptions:
    mainsail

######################################################################################
# MMU_SERVER
######################################################################################
[mmu_server]
enable_file_preprocessor: True
enable_toolchange_next_pos: True
update_spoolman_location: True


######################################################################################
# UPDATE MANAGER
######################################################################################
[update_manager]
refresh_interval: 168
enable_auto_refresh: True


#[update_manager timelapse]
#type: git_repo
#primary_branch: main
#path: ~/moonraker-timelapse
#origin: https://github.com/mainsail-crew/moonraker-timelapse.git
#managed_services: klipper moonraker

#[timelapse]
###   Directory where the generated video will be saved
#output_path: ~/timelapse/
###   Directory where ffmpeg is installed
#ffmpeg_binary_path: /usr/bin/ffmpeg

[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager mainsail-config]
type: git_repo
primary_branch: master
path: ~/mainsail-config
origin: https://github.com/mainsail-crew/mainsail-config.git
managed_services: klipper

[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest
install_script: tools/pkglist.sh

[update_manager sonar]
type: git_repo
path: ~/sonar
origin: https://github.com/mainsail-crew/sonar.git
primary_branch: main
managed_services: sonar
install_script: tools/install.sh

[update_manager KlipperScreen]
type: git_repo
path: ~/KlipperScreen
origin: https://github.com/moggieuk/KlipperScreen-Happy-Hare-Edition.git
virtualenv: ~/.KlipperScreen-env
requirements: scripts/KlipperScreen-requirements.txt
system_dependencies: scripts/system-dependencies.json
managed_services: KlipperScreen

[update_manager led_effect]
type: git_repo
path: ~/klipper-led_effect
origin: https://github.com/julianschill/klipper-led_effect.git
is_system_service: False

[update_manager klipper-backup]
type: git_repo
path: ~/klipper-backup
origin: https://github.com/Staubgeborener/klipper-backup.git
managed_services: moonraker
primary_branch: main

[update_manager cartographer]
type: git_repo
path: ~/cartographer-klipper
channel: dev
origin: https://github.com/Cartographer3D/cartographer-klipper.git
env: ~/klippy-env/bin/python
requirements: requirements.txt
install_script: install.sh
is_system_service: False
managed_services: klipper
info_tags:
  desc=Cartographer Probe

[update_manager happy-hare]
type: git_repo
path: ~/Happy-Hare
origin: https://github.com/enewman17/Happy-Hare.git
primary_branch: main
install_script: install.sh
managed_services: klipper



######################################################################################
# POWER Template
######################################################################################
# Control a relay providing power to the printer
[power printer_relay]
type: gpio
pin: gpiochip0/gpio23  # BTT PI2 = (gpiochip4/gpio22)
off_when_shutdown: True
initial_state: on

[power led_relay]
type: gpio
pin: gpiochip0/gpio24  # BTT PI2 = (gpiochip4/gpio3)
off_when_shutdown: True
initial_state: on

[power canbus_relay]
type: gpio
pin: gpiochip0/gpio25  # BTT PI2 = (gpiochip0/gpio20)
off_when_shutdown: True
initial_state: on

# Control a status led
#[power printer_led]
#type: gpio
#pin: !gpiochip0/gpio16  # inverts pin
#initial_state: off

# Control a printer illumination, powers on when
# Moonraker starts
#[power light_strip]
#type: gpio
#pin: gpiochip0/gpio17
#initial_state: on


######################################################################################
# Button Template
######################################################################################

# Emergency Stop Example
[button EMERGENCY_STOP]
type: gpio
pin: ^gpiochip0/gpio26    # BTT PI2 = (gpiochip0/gpio19)
on_press:
  # Executes immediately after a press is detected
  {% do call_method("printer.emergency_stop") %}

# Reboot Long Press Example
#[button REBOOT]
#type: gpio
#pin: gpio26       # Replace ## with pin number
#on_release:
  # Only call reboot if the button was held for more than 1 second.
  # Note that this won't execute until the button has been released.
#  {% if event.elapsed_time > 1.0 %}
#    {% do call_method("machine.reboot") %}
#  {% endif %}

# Double Click Notification Example
#[button NOTIFY_BTN]
#type: gpio
#pin: gpio26       # Replace ## with pin number
#on_press:
#  # Use the "user_data" context variable to track a single click
#  {% set clicked = user_data.clicked|default(false) %}
#  # It isn't possible to assign a value to a context variable in Jinja2,
#  # however since user_data is a dict we can call its methods.  The
#  # call to __setitem__ below is equivalent to:
#  #   user_data["clicked"] = true
#  {% do user_data.__setitem__("clicked", true) %}
#  {% if event.elapsed_time < 0.5 and clicked %}
#    # We will consider this a double click if the second click occurs
#    # within .5 seconds of releasing the first
#    {% do user_data.__setitem__("clicked", false) %}
#    {% do user_data.__setitem__("double_clicked", true) %}
#  {% endif %}
#on_release:
#  {% set double_clicked = user_data.double_clicked|default(false) %}
#  {% if double_clicked %}
#    {% do user_data.__setitem__("double_clicked", false) %}
#    {% do send_notification("Double Clicked!") %}
#  {% endif %}


############################################
#GPIO =
############################################
